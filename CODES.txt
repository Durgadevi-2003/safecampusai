dashboard.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>SafeCampus AI Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body class="bg-light">

<div class="container py-5">
    <h1 class="text-center mb-4">📊 SafeCampus AI – Student Risk Detector</h1>

    <!-- Upload Behavior -->
    <div class="card mb-4 shadow-sm">
        <div class="card-header bg-primary text-white">Upload Daily Behavior</div>
        <div class="card-body">
            <form action="{% url 'upload_behavior' %}" method="post">
                {% csrf_token %}
                <div class="mb-3">
                    <label class="form-label">Student ID</label>
                    <input type="text" class="form-control" name="student_id" required>
                </div>
                <div class="mb-3">
                    <label class="form-label">Behavior Notes</label>
                    <textarea class="form-control" name="behavior" rows="3" required></textarea>
                </div>
                <button type="submit" class="btn btn-success">Upload</button>
            </form>
        </div>
    </div>

    <!-- Predict Risk -->
    <div class="card mb-4 shadow-sm">
        <div class="card-header bg-warning">Predict Student Risk</div>
        <div class="card-body">
            <form action="{% url 'predict_student' student_id='123' %}" method="post">
                {% csrf_token %}
                <div class="mb-3">
                    <label class="form-label">Student ID</label>
                    <input type="text" class="form-control" name="student_id" value="123" required>
                </div>
                <button type="submit" class="btn btn-danger">Predict Risk</button>
            </form>
        </div>
    </div>

    <!-- Prediction History -->
    <div class="card shadow-sm">
        <div class="card-header bg-info text-white">Prediction History</div>
        <div class="card-body">
            <form onsubmit="window.location='/api/students/history/'+this.student_id.value+'/'; return false;">
                <div class="mb-3">
                    <label class="form-label">Student ID</label>
                    <input type="text" class="form-control" name="student_id" value="123" required>
                </div>
                <button type="submit" class="btn btn-primary">View History</button>
            </form>
        </div>
    </div>
</div>

</body>
</html>

------------

03-10-2025 (17:32)

views.py

# from rest_framework.decorators import api_view
# from rest_framework.response import Response
# from django.shortcuts import get_object_or_404
# from .models import Student, DailyBehavior, RiskPrediction
# from .serializers import StudentSerializer, DailyBehaviorSerializer, RiskPredictionSerializer
# from .utils.predictor import predict_for_student_behaviors, SEQ_LEN

# @api_view(["POST"])
# def upload_behavior(request):
#     serializer = DailyBehaviorSerializer(data=request.data)
#     if serializer.is_valid():
#         serializer.save()
#         return Response({"status": "success", "data": serializer.data})
#     return Response(serializer.errors, status=400)

# @api_view(["POST"])
# def predict_student(request, student_id):
#     student = get_object_or_404(Student, student_id=student_id)
#     behaviors = list(DailyBehavior.objects.filter(student=student).order_by("-date")[:SEQ_LEN])
#     behaviors = list(reversed(behaviors))
#     res = predict_for_student_behaviors(behaviors)
#     if not res:
#         return Response({"detail": "Insufficient data (need %d days)" % SEQ_LEN}, status=400)
#     pred = RiskPrediction.objects.create(student=student, risk_label=res["label"], risk_score=res["score"], metadata={"probs": res["probs"]})
#     return Response({"label": res["label"], "score": res["score"], "id": pred.id})

# @api_view(["GET"])
# def prediction_history(request, student_id):
#     student = get_object_or_404(Student, student_id=student_id)
#     preds = RiskPrediction.objects.filter(student=student).order_by("-timestamp")
#     return Response(RiskPredictionSerializer(preds, many=True).data)


#new

from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from .models import Student, DailyBehavior, RiskPrediction
from .forms import StudentForm, DailyBehaviorForm
from django.shortcuts import render, redirect
from django.contrib.auth import authenticate, login, logout
from django.contrib import messages
from django.contrib.auth.models import User
from django.contrib.auth.decorators import login_required

# -------------------------
# Custom Login
# -------------------------
def login_view(request):
    if request.method == "POST":
        username = request.POST["username"]
        password = request.POST["password"]
        user = authenticate(request, username=username, password=password)
        if user:
            login(request, user)
            return redirect("student_dashboard")   # redirect to student dashboard
        else:
            messages.error(request, "Invalid username or password")
    return render(request, "auth/login.html")


# -------------------------
# Custom Signup
# -------------------------
def signup_view(request):
    if request.method == "POST":
        username = request.POST["username"]
        password = request.POST["password"]
        confirm = request.POST["confirm"]

        if password != confirm:
            messages.error(request, "Passwords do not match")
        elif User.objects.filter(username=username).exists():
            messages.error(request, "Username already exists")
        else:
            user = User.objects.create_user(username=username, password=password)
            login(request, user)
            return redirect("students/student_list")   # go to dashboard after signup

    return render(request, "auth/signup.html")


# -------------------------
# Custom Logout
# -------------------------
@login_required
def logout_view(request):
    logout(request)
    return redirect("login")   # back to login page


@login_required
def student_dashboard(request):
    return render(request, "students/dashboard.html")

# -------------------------
# Add / Edit Student
# -------------------------
@login_required
def add_student(request):
    if request.method == "POST":
        form = StudentForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect("students/student_list")  # redirect to list page after saving
    else:
        form = StudentForm()
    return render(request, "students/student_form.html", {"form": form})


# -------------------------
# Upload Daily Behavior
# -------------------------
@login_required
def upload_behavior(request):
    if request.method == "POST":
        form = DailyBehaviorForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect("students/behavior_success.html")  # you can create a success page
    else:
        form = DailyBehaviorForm()
    return render(request, "students/behavior_form.html", {"form": form})


# -------------------------
# Show Prediction History
# -------------------------
@login_required
def prediction_history(request, student_id):
    student = get_object_or_404(Student, student_id=student_id)
    predictions = RiskPrediction.objects.filter(student=student).order_by("-timestamp")
    return render(
        request,
        "students/history.html",
        {"student": student, "predictions": predictions},
    )


# -------------------------
# Simple Student List Page
# -------------------------
@login_required
def student_list(request):
    students = Student.objects.all()
    return render(request, "students/student_list.html", {"students": students})
--------------------------
04-10-2025 (10:58)

views.py 

from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from .models import Student, DailyBehavior, RiskPrediction
from .forms import StudentForm, DailyBehaviorForm
from django.shortcuts import render, redirect
from django.contrib.auth import authenticate, login, logout
from django.contrib import messages
from django.contrib.auth.models import User
from django.contrib.auth.decorators import login_required
import joblib
import json
import numpy as np
import tensorflow as tf
 
 
def login_view(request):
    if request.method == "POST":
        username = request.POST["username"]
        password = request.POST["password"]
        user = authenticate(request, username=username, password=password)
        if user:
            login(request, user)
            return redirect("student_dashboard")   # redirect to student dashboard
        else:
            messages.error(request, "Invalid username or password")
    return render(request, "auth/login.html")

def signup_view(request):
    if request.method == "POST":
        username = request.POST["username"]
        password = request.POST["password"]
        confirm = request.POST["confirm"]

        if password != confirm:
            messages.error(request, "Passwords do not match")
        elif User.objects.filter(username=username).exists():
            messages.error(request, "Username already exists")
        else:
            user = User.objects.create_user(username=username, password=password)
            # Create linked Student profile
            Student.objects.create(
            user=user,                 # 🔑 link to user
            student_id=username,       # or generate unique roll no
            name=username              # you can add email, dept, etc
            )
            login(request, user)
            return redirect("students/student_list")   # go to dashboard after signup

    return render(request, "auth/signup.html")

@login_required
def logout_view(request):
    logout(request)
    return redirect("login")   # back to login page

 

# # Load models once (for performance)
# scaler = joblib.load("models/scaler.joblib")
# with open("models/student_behavior_xgb.json", "r") as f:
#     xgb_model_json = json.load(f)
# # Example: If using XGBoost you can reload like this:
# # import xgboost as xgb
# # xgb_model = xgb.Booster()
# # xgb_model.load_model("models/student_behavior_xgb.json")

# lstm_model = tf.keras.models.load_model("models/student_behavior_lstm_supervised.h5")


# # @login_required
# # def student_dashboard(request):
# #     student = Student.objects.filter(student_id=request.user.username).first()

# #     latest_behavior = None
# #     latest_prediction = None

# #     if student:
# #         latest_behavior = DailyBehavior.objects.filter(student=student).order_by("-date").first()

# #         if latest_behavior:
# #             # Prepare input features
# #             features = np.array([[
# #                 latest_behavior.screen_time_hrs,
# #                 latest_behavior.night_usage_hrs,
# #                 latest_behavior.sleep_hours,
# #                 latest_behavior.app_social_hrs,
# #                 latest_behavior.app_entertainment_hrs,
# #                 latest_behavior.app_education_hrs,
# #                 int(latest_behavior.late_sleep_flag),
# #                 int(latest_behavior.low_sleep_flag),
# #             ]])

# #             # Scale
# #             features_scaled = scaler.transform(features)

# #             # Predict (example with LSTM)
# #             prediction = lstm_model.predict(features_scaled, verbose=0)
# #             risk_score = float(prediction[0][0])  # depends on model output
# #             risk_label = "High Risk" if risk_score > 0.6 else "Low Risk"

# #             # Save prediction in DB
# #             latest_prediction = RiskPrediction.objects.create(
# #                 student=student,
# #                 risk_label=risk_label,
# #                 risk_score=risk_score,
# #                 metadata={"model": "LSTM"}
# #             )

# #     return render(request, "students/dashboard.html", {
# #         "student": student,
# #         "latest_behavior": latest_behavior,
# #         "latest_prediction": latest_prediction,
# #     })
 

# def student_dashboard(request):
#     if not request.user.is_authenticated:
#         return redirect("login")

#     # try to find student profile matching logged-in username
#     student = Student.objects.filter(student_id=request.user.username).first()

#     if not student:
#         return render(request, "students/dashboard.html", {
#             "error": "No student profile found for this user."
#         })

#     # load behaviors + predictions for that student
#     behaviors = student.behaviors.all().order_by("-date")[:10]
#     predictions = student.predictions.all().order_by("-timestamp")[:5]

#     return render(request, "students/dashboard.html", {
#         "student": student,
#         "behaviors": behaviors,
#         "predictions": predictions,
#     })

 
# Load models once
scaler = joblib.load("models/scaler.joblib")
lstm_model = tf.keras.models.load_model("models/student_behavior_lstm_supervised.h5")

# @login_required
# def student_dashboard(request):
#     # fetch the student profile linked to logged-in user
#     student = getattr(request.user, "student", None)

#     if not student:
#         return render(request, "students/dashboard.html", {
#             "error": "No student profile linked to this account."
#         })

#     latest_behavior = DailyBehavior.objects.filter(student=student).order_by("-date").first()
#     latest_prediction = None

#     if latest_behavior:
#         # prepare features
#         features = np.array([[
#             latest_behavior.screen_time_hrs,
#             latest_behavior.night_usage_hrs,
#             latest_behavior.sleep_hours,
#             latest_behavior.app_social_hrs,
#             latest_behavior.app_entertainment_hrs,
#             latest_behavior.app_education_hrs,
#             int(latest_behavior.late_sleep_flag),
#             int(latest_behavior.low_sleep_flag),
#         ]])

#         features_scaled = scaler.transform(features)

#         # predict with LSTM
#         prediction = lstm_model.predict(features_scaled, verbose=0)
#         risk_score = float(prediction[0][0])
#         risk_label = "High Risk" if risk_score > 0.6 else "Low Risk"

#         # save prediction
#         latest_prediction = RiskPrediction.objects.create(
#             student=student,
#             risk_label=risk_label,
#             risk_score=risk_score,
#             metadata={"model": "LSTM"}
#         )

#     return render(request, "students/dashboard.html", {
#         "student": student,
#         "latest_behavior": latest_behavior,
#         "latest_prediction": latest_prediction,
#     })

 
# @login_required
# def student_dashboard(request):
#     # ensure student profile exists
#     student, created = Student.objects.get_or_create(user=request.user)

#     latest_behavior = DailyBehavior.objects.filter(student=student).order_by("-date").first()
#     latest_prediction = None

#     if latest_behavior:
#         # prepare features
#         features = np.array([[ 
#             latest_behavior.screen_time_hrs,
#             latest_behavior.night_usage_hrs,
#             latest_behavior.sleep_hours,
#             latest_behavior.app_social_hrs,
#             latest_behavior.app_entertainment_hrs,
#             latest_behavior.app_education_hrs,
#             int(latest_behavior.late_sleep_flag),
#             int(latest_behavior.low_sleep_flag),
#         ]])

#         features_scaled = scaler.transform(features)

#         # predict with LSTM
#         prediction = lstm_model.predict(features_scaled, verbose=0)
#         risk_score = float(prediction[0][0])
#         risk_label = "High Risk" if risk_score > 0.6 else "Low Risk"

#         # save prediction
#         latest_prediction = RiskPrediction.objects.create(
#             student=student,
#             risk_label=risk_label,
#             risk_score=risk_score,
#             metadata={"model": "LSTM"}
#         )

#     return render(request, "students/dashboard.html", {
#         "student": student,
#         "latest_behavior": latest_behavior,
#         "latest_prediction": latest_prediction,
#         "created": created  # optional, to show “Profile created” message
#     })
# new

@login_required
def student_dashboard(request):
    # ✅ ensure student profile exists
    student, created = Student.objects.get_or_create(user=request.user)

    latest_behavior = DailyBehavior.objects.filter(student=student).order_by("-date").first()
    latest_prediction = None

    if latest_behavior:
        # ✅ fetch last 7 days of data
        behaviors = DailyBehavior.objects.filter(student=student).order_by("-date")[:7]

        if len(behaviors) == 7:
            # build feature matrix (7 days × 8 features)
            features = np.array([
                [
                    b.screen_time_hrs,
                    b.night_usage_hrs,
                    b.sleep_hours,
                    b.app_social_hrs,
                    b.app_entertainment_hrs,
                    b.app_education_hrs,
                    int(b.late_sleep_flag),
                    int(b.low_sleep_flag),
                ]
                for b in reversed(behaviors)  # oldest → newest order
            ])

            # scale and reshape for LSTM
            features_scaled = scaler.transform(features)
            features_reshaped = features_scaled.reshape((1, 7, 8))

            # predict
            prediction = lstm_model.predict(features_reshaped, verbose=0)
            risk_score = float(prediction[0][0])
            risk_label = "High Risk" if risk_score > 0.6 else "Low Risk"

            # save prediction
            latest_prediction = RiskPrediction.objects.create(
                student=student,
                risk_label=risk_label,
                risk_score=risk_score,
                metadata={"model": "LSTM", "days_used": 7}
            )

    return render(request, "students/dashboard.html", {
        "student": student,
        "latest_behavior": latest_behavior,
        "latest_prediction": latest_prediction,
        "created": created  # ✅ can show “Profile created” message
    })

@login_required
def add_student(request):
    if request.method == "POST":
        form = StudentForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect("students/student_list")  # redirect to list page after saving
    else:
        form = StudentForm()
    return render(request, "students/student_form.html", {"form": form})
 
@login_required
def upload_behavior(request):
    if request.method == "POST":
        form = DailyBehaviorForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect("students/behavior_success.html")  # you can create a success page
    else:
        form = DailyBehaviorForm()
    return render(request, "students/behavior_form.html", {"form": form})
 
@login_required
def prediction_history(request, student_id):
    student = get_object_or_404(Student, student_id=student_id)
    predictions = RiskPrediction.objects.filter(student=student).order_by("-timestamp")
    return render(
        request,
        "students/history.html",
        {"student": student, "predictions": predictions},
    )
 
@login_required
def student_list(request):
    students = Student.objects.all()
    return render(request, "students/student_list.html", {"students": students})


 
# @login_required
# def add_daily_behavior(request):
#     student, _ = Student.objects.get_or_create(user=request.user)

#     if request.method == 'POST':
#         form = DailyBehaviorForm(request.POST)
#         if form.is_valid():
#             behavior = form.save(commit=False)
#             behavior.student = student
#             behavior.save()

#             # Predict immediately after saving
#             features = np.array([[ 
#                 behavior.screen_time_hrs,
#                 behavior.night_usage_hrs,
#                 behavior.sleep_hours,
#                 behavior.app_social_hrs,
#                 behavior.app_entertainment_hrs,
#                 behavior.app_education_hrs,
#                 int(behavior.late_sleep_flag),
#                 int(behavior.low_sleep_flag),
#             ]])
#             features_scaled = scaler.transform(features)
#             prediction = lstm_model.predict(features_scaled, verbose=0)
#             risk_score = float(prediction[0][0])
#             risk_label = "High Risk" if risk_score > 0.6 else "Low Risk"

#             RiskPrediction.objects.create(
#                 student=student,
#                 risk_label=risk_label,
#                 risk_score=risk_score,
#                 metadata={"model": "LSTM"}
#             )

#             return redirect('student_dashboard')
#     else:
#         form = DailyBehaviorForm()

#     return render(request, 'students/add_behavior.html', {'form': form})

# new
@login_required
def add_daily_behavior(request):
    student, _ = Student.objects.get_or_create(user=request.user)

    if request.method == 'POST':
        form = DailyBehaviorForm(request.POST)
        if form.is_valid():
            data = form.cleaned_data

            # ✅ Prevent duplicate date insert using update_or_create
            behavior, created = DailyBehavior.objects.update_or_create(
                student=student,
                date=data["date"],
                defaults={
                    "screen_time_hrs": data["screen_time_hrs"],
                    "night_usage_hrs": data["night_usage_hrs"],
                    "sleep_hours": data["sleep_hours"],
                    "app_social_hrs": data["app_social_hrs"],
                    "app_entertainment_hrs": data["app_entertainment_hrs"],
                    "app_education_hrs": data["app_education_hrs"],
                    "late_sleep_flag": data["late_sleep_flag"],
                    "low_sleep_flag": data["low_sleep_flag"],
                }
            )

            # ✅ Fetch last 7 days for prediction
            behaviors = DailyBehavior.objects.filter(student=student).order_by("-date")[:7]

            if len(behaviors) == 7:
                features = np.array([
                    [
                        b.screen_time_hrs,
                        b.night_usage_hrs,
                        b.sleep_hours,
                        b.app_social_hrs,
                        b.app_entertainment_hrs,
                        b.app_education_hrs,
                        int(b.late_sleep_flag),
                        int(b.low_sleep_flag),
                    ]
                    for b in reversed(behaviors)  # oldest → newest
                ])

                # scale & reshape
                features_scaled = scaler.transform(features)
                features_reshaped = features_scaled.reshape((1, 7, 8))

                # predict
                prediction = lstm_model.predict(features_reshaped, verbose=0)
                risk_score = float(prediction[0][0])
                risk_label = "High Risk" if risk_score > 0.6 else "Low Risk"

                # save prediction
                RiskPrediction.objects.create(
                    student=student,
                    risk_label=risk_label,
                    risk_score=risk_score,
                    metadata={"model": "LSTM", "days_used": 7}
                )

            return redirect('student_dashboard')

    else:
        form = DailyBehaviorForm()

    return render(request, 'students/add_behavior.html', {'form': form})


------------------------

Dashboard.html

{% extends "base.html" %}
{% block content %}
<div class="container mt-5">
    <h2 class="mb-4">📊 Student Dashboard</h2>

    <div class="row">
        <div class="col-md-4">
            <div class="card shadow-sm mb-3">
                <div class="card-body text-center">
                    <h5 class="card-title">➕ Add Daily Behavior</h5>
                    <a href="{% url 'upload_behavior' %}" class="btn btn-primary">Upload Behavior</a>
                </div>
            </div>
        </div>
        
        <div class="col-md-4">
            <div class="card shadow-sm mb-3">
                <div class="card-body text-center">
                    <h5 class="card-title">📈 Predictions</h5>
                    <a href="prediction_history" class="btn btn-success">Get Prediction</a>
                </div>
            </div>
        </div>
        
        <div class="col-md-4">
            <div class="card shadow-sm mb-3">
                <div class="card-body text-center">
                    <h5 class="card-title">📜 History</h5>
                    <a href="#" class="btn btn-secondary">View History</a>
                </div>
            </div>
        </div>
    </div>
<div class="container mt-5">
    <h2>📊 Student Dashboard</h2>

    {% if student %}
        <div class="card mt-4 shadow-sm">
            <div class="card-body">
                <h4>{{ student.name }} ({{ student.student_id }})</h4>
                <p>Email: {{ student.email }}</p>
            </div>
        </div>

        {% if latest_behavior %}
        <div class="card mt-4 shadow-sm">
            <div class="card-body">
                <h5>📌 Latest Behavior ({{ latest_behavior.date }})</h5>
                <ul>
                    <li>Screen time: {{ latest_behavior.screen_time_hrs }} hrs</li>
                    <li>Night usage: {{ latest_behavior.night_usage_hrs }} hrs</li>
                    <li>Sleep: {{ latest_behavior.sleep_hours }} hrs</li>
                    <li>Social apps: {{ latest_behavior.app_social_hrs }} hrs</li>
                    <li>Entertainment: {{ latest_behavior.app_entertainment_hrs }} hrs</li>
                    <li>Education: {{ latest_behavior.app_education_hrs }} hrs</li>
                </ul>
            </div>
        </div>
        {% endif %}

        {% if latest_prediction %}
        <div class="card mt-4 shadow-sm border-success">
            <div class="card-body">
                <h5>🧠 Latest Prediction</h5>
                <p><strong>Risk Label:</strong> {{ latest_prediction.risk_label }}</p>
                <p><strong>Risk Score:</strong> {{ latest_prediction.risk_score|floatformat:2 }}</p>
            </div>
        </div>
        {% else %}
            <p class="mt-3 text-muted">⚠️ No prediction available yet.</p>
        {% endif %}
    {% else %}
        <p>No student profile found for this user.</p>
    {% endif %}

    <h2>📊 Student Dashboard</h2>

{% if error %}
  <p style="color: red;">{{ error }}</p>
{% else %}
  <h3>{{ student.name }} ({{ student.student_id }})</h3>
  <p>Email: {{ student.email }}</p>

  <h4>Recent Behaviors</h4>
  <ul>
    {% for b in behaviors %}
      <li>{{ b.date }} - Screen Time: {{ b.screen_time_hrs }} hrs, Sleep: {{ b.sleep_hours }} hrs</li>
    {% empty %}
      <li>No behaviors recorded yet.</li>
    {% endfor %}
  </ul>

  <h4>Recent Predictions</h4>
  <ul>
    {% for p in predictions %}
      <li>{{ p.timestamp }} - Risk: {{ p.risk_label }} ({{ p.risk_score|floatformat:2 }})</li>
    {% empty %}
      <li>No predictions yet.</li>
    {% endfor %}
  </ul>
{% endif %}
<h2>📊 Student Dashboard</h2>

{% if created %}
    <p>Your student profile was created automatically!</p>
{% endif %}

<p>Welcome, {{ student.user.username }}</p>

{% if latest_behavior %}
    <p>Latest behavior date: {{ latest_behavior.date }}</p>
    <p>Screen time: {{ latest_behavior.screen_time_hrs }} hrs</p>
{% else %}
    <p>No behavior data yet.</p>
{% endif %}

{% if latest_prediction %}
    <p>Risk Label: {{ latest_prediction.risk_label }}</p>
    <p>Risk Score: {{ latest_prediction.risk_score }}</p>
{% else %}
    <p>No predictions yet.</p>
{% endif %}
<a href="{% url 'add_daily_behavior' %}" class="btn btn-success">Add Today's Behavior</a>

</div>
    <div class="mt-4 text-end">
        <a href="{% url 'logout' %}" class="btn btn-danger">Logout</a>
    </div>
</div>
{% endblock %}
-----------------
06-10-2025

dashboard.html

{% extends "base.html" %}
{% block content %}
{% load custom_filters %}

<div class="container mt-5">
    <h2 class="mb-4">📊 Student Dashboard</h2>

    <!-- Quick Action Cards -->
    <div class="row">
        <div class="col-md-4">
            <div class="card shadow-sm mb-3">
                <div class="card-body text-center">
                    <h5 class="card-title">➕ Add Daily Behavior</h5>
                    <a href="{% url 'upload_behavior' %}" class="btn btn-primary">Upload Behavior</a>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card shadow-sm mb-3">
                <div class="card-body text-center">
                    <h5 class="card-title">📈 Predictions</h5>
                    <a href="prediction_history" class="btn btn-success">Get Prediction</a>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card shadow-sm mb-3">
                <div class="card-body text-center">
                    <h5 class="card-title">📜 History</h5>
                    <a href="#" class="btn btn-secondary">View History</a>
                </div>
            </div>
        </div>
    </div>

    <!-- Student Info -->
    {% if student %}
    <div class="card mt-4 shadow-sm">
        <div class="card-body">
            <h4>{{ student.name }} ({{ student.student_id }})</h4>
            <p>Email: {{ student.email }}</p>
        </div>
    </div>
    {% endif %}

    <!-- Latest Behavior -->
    {% if latest_behavior %}
    <div class="card mt-4 shadow-sm">
        <div class="card-body">
            <h5>📌 Latest Behavior ({{ latest_behavior.date }})</h5>
            <ul>
                <li>Screen time: {{ latest_behavior.screen_time_hrs }} hrs</li>
                <li>Night usage: {{ latest_behavior.night_usage_hrs }} hrs</li>
                <li>Sleep: {{ latest_behavior.sleep_hours }} hrs</li>
                <li>Social apps: {{ latest_behavior.app_social_hrs }} hrs</li>
                <li>Entertainment: {{ latest_behavior.app_entertainment_hrs }} hrs</li>
                <li>Education: {{ latest_behavior.app_education_hrs }} hrs</li>
            </ul>

            <!-- Progress Bars -->
            <h6>Progress Overview</h6>
            <div class="progress mb-2">
                <div class="progress-bar bg-info" role="progressbar" 
                     style="width: {{ latest_behavior.screen_time_hrs|floatformat:1|mul:8 }}%;" 
                     aria-valuenow="{{ latest_behavior.screen_time_hrs }}" aria-valuemin="0" aria-valuemax="12">
                    Screen Time: {{ latest_behavior.screen_time_hrs }} hrs
                </div>
            </div>
            <div class="progress mb-2">
                <div class="progress-bar bg-success" role="progressbar" 
                     style="width: {{ latest_behavior.sleep_hours|floatformat:1|mul:10 }}%;" 
                     aria-valuenow="{{ latest_behavior.sleep_hours }}" aria-valuemin="0" aria-valuemax="12">
                    Sleep: {{ latest_behavior.sleep_hours }} hrs
                </div>
            </div>
        </div>
    </div>
    {% endif %}

    <!-- Latest Prediction -->
    {% if latest_prediction %}
    <div class="card mt-4 shadow-sm border-success">
        <div class="card-body">
            <h5>🧠 Latest Prediction</h5>
            <p><strong>Risk Label:</strong> {{ latest_prediction.risk_label }}</p>
            <p><strong>Risk Score:</strong> {{ latest_prediction.risk_score|floatformat:2 }}</p>
        </div>
    </div>
    {% endif %}

    <!-- Charts -->
    <div class="row mt-4">
        <div class="col-md-6">
            <div class="card shadow-sm mb-3">
                <div class="card-body">
                    <h5>📊 Screen Time Trend</h5>
                    <canvas id="screenTimeChart"></canvas>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card shadow-sm mb-3">
                <div class="card-body">
                    <h5>📊 Risk Score Trend</h5>
                    <canvas id="riskScoreChart"></canvas>
                </div>
            </div>
        </div>
    </div>

    <div class="mt-4 text-end">
        <a href="{% url 'logout' %}" class="btn btn-danger">Logout</a>
    </div>
</div>

<!-- Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
const screenTimeCtx = document.getElementById('screenTimeChart').getContext('2d');
new Chart(screenTimeCtx, {
    type: 'line',
    data: {
        labels: [{% for b in behaviors %}'{{ b.date }}',{% endfor %}],
        datasets: [{
            label: 'Screen Time (hrs)',
            data: [{% for b in behaviors %}{{ b.screen_time_hrs }},{% endfor %}],
            borderColor: 'rgba(54, 162, 235, 1)',
            backgroundColor: 'rgba(54, 162, 235, 0.2)',
            tension: 0.3,
            fill: true
        }]
    },
    options: {
        responsive: true,
        plugins: { legend: { position: 'top' } },
        scales: { y: { beginAtZero: true } }
    }
});

const riskScoreCtx = document.getElementById('riskScoreChart').getContext('2d');
new Chart(riskScoreCtx, {
    type: 'bar',
    data: {
        labels: [{% for p in predictions %}'{{ p.timestamp|date:"M d" }}',{% endfor %}],
        datasets: [{
            label: 'Risk Score',
            data: [{% for p in predictions %}{{ p.risk_score }},{% endfor %}],
            backgroundColor: function(context) {
                const score = context.dataset.data[context.dataIndex];
                return score > 0.6 ? 'rgba(255, 99, 132, 0.7)' : 'rgba(75, 192, 192, 0.7)';
            }
        }]
    },
    options: {
        responsive: true,
        plugins: { legend: { display: false } },
        scales: { y: { beginAtZero: true, max: 1 } }
    }
});
</script>
{% endblock %}
-----------------------------------
view.py

from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from .models import Student, DailyBehavior, RiskPrediction
from .forms import StudentForm, DailyBehaviorForm
from django.shortcuts import render, redirect
from django.contrib.auth import authenticate, login, logout
from django.contrib import messages
from django.contrib.auth.models import User
from django.contrib.auth.decorators import login_required
import joblib
import json
import numpy as np
import tensorflow as tf
 
 
def login_view(request):
    if request.method == "POST":
        username = request.POST["username"]
        password = request.POST["password"]
        user = authenticate(request, username=username, password=password)
        if user:
            login(request, user)
            return redirect("student_dashboard")   # redirect to student dashboard
        else:
            messages.error(request, "Invalid username or password")
    return render(request, "auth/login.html")

def signup_view(request):
    if request.method == "POST":
        username = request.POST["username"]
        password = request.POST["password"]
        confirm = request.POST["confirm"]

        if password != confirm:
            messages.error(request, "Passwords do not match")
        elif User.objects.filter(username=username).exists():
            messages.error(request, "Username already exists")
        else:
            user = User.objects.create_user(username=username, password=password)
            # Create linked Student profile
            Student.objects.create(
            user=user,                 # 🔑 link to user
            student_id=username,       # or generate unique roll no
            name=username              # you can add email, dept, etc
            )
            login(request, user)
            return redirect("students/student_list")   # go to dashboard after signup

    return render(request, "auth/signup.html")

@login_required
def logout_view(request):
    logout(request)
    return redirect("login")   # back to login page

 

# # Load models once (for performance)
# scaler = joblib.load("models/scaler.joblib")
# with open("models/student_behavior_xgb.json", "r") as f:
#     xgb_model_json = json.load(f)
# # Example: If using XGBoost you can reload like this:
# # import xgboost as xgb
# # xgb_model = xgb.Booster()
# # xgb_model.load_model("models/student_behavior_xgb.json")

# lstm_model = tf.keras.models.load_model("models/student_behavior_lstm_supervised.h5")


# # @login_required
# # def student_dashboard(request):
# #     student = Student.objects.filter(student_id=request.user.username).first()

# #     latest_behavior = None
# #     latest_prediction = None

# #     if student:
# #         latest_behavior = DailyBehavior.objects.filter(student=student).order_by("-date").first()

# #         if latest_behavior:
# #             # Prepare input features
# #             features = np.array([[
# #                 latest_behavior.screen_time_hrs,
# #                 latest_behavior.night_usage_hrs,
# #                 latest_behavior.sleep_hours,
# #                 latest_behavior.app_social_hrs,
# #                 latest_behavior.app_entertainment_hrs,
# #                 latest_behavior.app_education_hrs,
# #                 int(latest_behavior.late_sleep_flag),
# #                 int(latest_behavior.low_sleep_flag),
# #             ]])

# #             # Scale
# #             features_scaled = scaler.transform(features)

# #             # Predict (example with LSTM)
# #             prediction = lstm_model.predict(features_scaled, verbose=0)
# #             risk_score = float(prediction[0][0])  # depends on model output
# #             risk_label = "High Risk" if risk_score > 0.6 else "Low Risk"

# #             # Save prediction in DB
# #             latest_prediction = RiskPrediction.objects.create(
# #                 student=student,
# #                 risk_label=risk_label,
# #                 risk_score=risk_score,
# #                 metadata={"model": "LSTM"}
# #             )

# #     return render(request, "students/dashboard.html", {
# #         "student": student,
# #         "latest_behavior": latest_behavior,
# #         "latest_prediction": latest_prediction,
# #     })
 

# def student_dashboard(request):
#     if not request.user.is_authenticated:
#         return redirect("login")

#     # try to find student profile matching logged-in username
#     student = Student.objects.filter(student_id=request.user.username).first()

#     if not student:
#         return render(request, "students/dashboard.html", {
#             "error": "No student profile found for this user."
#         })

#     # load behaviors + predictions for that student
#     behaviors = student.behaviors.all().order_by("-date")[:10]
#     predictions = student.predictions.all().order_by("-timestamp")[:5]

#     return render(request, "students/dashboard.html", {
#         "student": student,
#         "behaviors": behaviors,
#         "predictions": predictions,
#     })

 
# Load models once
scaler = joblib.load("models/scaler.joblib")
lstm_model = tf.keras.models.load_model("models/student_behavior_lstm_supervised.h5")

# @login_required
# def student_dashboard(request):
#     # fetch the student profile linked to logged-in user
#     student = getattr(request.user, "student", None)

#     if not student:
#         return render(request, "students/dashboard.html", {
#             "error": "No student profile linked to this account."
#         })

#     latest_behavior = DailyBehavior.objects.filter(student=student).order_by("-date").first()
#     latest_prediction = None

#     if latest_behavior:
#         # prepare features
#         features = np.array([[
#             latest_behavior.screen_time_hrs,
#             latest_behavior.night_usage_hrs,
#             latest_behavior.sleep_hours,
#             latest_behavior.app_social_hrs,
#             latest_behavior.app_entertainment_hrs,
#             latest_behavior.app_education_hrs,
#             int(latest_behavior.late_sleep_flag),
#             int(latest_behavior.low_sleep_flag),
#         ]])

#         features_scaled = scaler.transform(features)

#         # predict with LSTM
#         prediction = lstm_model.predict(features_scaled, verbose=0)
#         risk_score = float(prediction[0][0])
#         risk_label = "High Risk" if risk_score > 0.6 else "Low Risk"

#         # save prediction
#         latest_prediction = RiskPrediction.objects.create(
#             student=student,
#             risk_label=risk_label,
#             risk_score=risk_score,
#             metadata={"model": "LSTM"}
#         )

#     return render(request, "students/dashboard.html", {
#         "student": student,
#         "latest_behavior": latest_behavior,
#         "latest_prediction": latest_prediction,
#     })

 
# @login_required
# def student_dashboard(request):
#     # ensure student profile exists
#     student, created = Student.objects.get_or_create(user=request.user)

#     latest_behavior = DailyBehavior.objects.filter(student=student).order_by("-date").first()
#     latest_prediction = None

#     if latest_behavior:
#         # prepare features
#         features = np.array([[ 
#             latest_behavior.screen_time_hrs,
#             latest_behavior.night_usage_hrs,
#             latest_behavior.sleep_hours,
#             latest_behavior.app_social_hrs,
#             latest_behavior.app_entertainment_hrs,
#             latest_behavior.app_education_hrs,
#             int(latest_behavior.late_sleep_flag),
#             int(latest_behavior.low_sleep_flag),
#         ]])

#         features_scaled = scaler.transform(features)

#         # predict with LSTM
#         prediction = lstm_model.predict(features_scaled, verbose=0)
#         risk_score = float(prediction[0][0])
#         risk_label = "High Risk" if risk_score > 0.6 else "Low Risk"

#         # save prediction
#         latest_prediction = RiskPrediction.objects.create(
#             student=student,
#             risk_label=risk_label,
#             risk_score=risk_score,
#             metadata={"model": "LSTM"}
#         )

#     return render(request, "students/dashboard.html", {
#         "student": student,
#         "latest_behavior": latest_behavior,
#         "latest_prediction": latest_prediction,
#         "created": created  # optional, to show “Profile created” message
#     })
# new

@login_required
def student_dashboard(request):
    # ✅ ensure student profile exists
    student, created = Student.objects.get_or_create(user=request.user)

    latest_behavior = DailyBehavior.objects.filter(student=student).order_by("-date").first()
    latest_prediction = None

    if latest_behavior:
        # ✅ fetch last 7 days of data
        # behaviors = DailyBehavior.objects.filter(student=student).order_by("-date")[:7]
        # ✅ Get recent trends
        behaviors = DailyBehavior.objects.filter(student=student).order_by('date')[:7]
        predictions = RiskPrediction.objects.filter(student=student).order_by('timestamp')[:7]
        if len(behaviors) == 7:
            # build feature matrix (7 days × 8 features)
            features = np.array([
                [
                    b.screen_time_hrs,
                    b.night_usage_hrs,
                    b.sleep_hours,
                    b.app_social_hrs,
                    b.app_entertainment_hrs,
                    b.app_education_hrs,
                    int(b.late_sleep_flag),
                    int(b.low_sleep_flag),
                ]
                for b in reversed(behaviors)  # oldest → newest order
            ])

            # scale and reshape for LSTM
            features_scaled = scaler.transform(features)
            features_reshaped = features_scaled.reshape((1, 7, 8))

            # predict
            prediction = lstm_model.predict(features_reshaped, verbose=0)
            risk_score = float(prediction[0][0])
            risk_label = "High Risk" if risk_score > 0.6 else "Low Risk"

            # save prediction
            latest_prediction = RiskPrediction.objects.create(
                student=student,
                risk_label=risk_label,
                risk_score=risk_score,
                metadata={"model": "LSTM", "days_used": 7}
            )

    return render(request, "students/dashboard.html", {
        "student": student,
        "latest_behavior": latest_behavior,
        "latest_prediction": latest_prediction,
        "created": created,  # ✅ can show “Profile created” message
        "behaviors": behaviors,
        "predictions": predictions,
    })

@login_required
def add_student(request):
    if request.method == "POST":
        form = StudentForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect("students/student_list")  # redirect to list page after saving
    else:
        form = StudentForm()
    return render(request, "students/student_form.html", {"form": form})
 
@login_required
def upload_behavior(request):
    if request.method == "POST":
        form = DailyBehaviorForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect("students/behavior_success.html")  # you can create a success page
    else:
        form = DailyBehaviorForm()
    return render(request, "students/behavior_form.html", {"form": form})
 
@login_required
def prediction_history(request, student_id):
    student = get_object_or_404(Student, student_id=student_id)
    predictions = RiskPrediction.objects.filter(student=student).order_by("-timestamp")
    return render(
        request,
        "students/history.html",
        {"student": student, "predictions": predictions},
    )
 
@login_required
def student_list(request):
    students = Student.objects.all()
    return render(request, "students/student_list.html", {"students": students})

# @login_required
# def add_daily_behavior(request):
#     student, _ = Student.objects.get_or_create(user=request.user)

#     if request.method == 'POST':
#         form = DailyBehaviorForm(request.POST)
#         if form.is_valid():
#             data = form.cleaned_data

#             # ✅ Prevent duplicates
#             behavior, created = DailyBehavior.objects.update_or_create(
#                 student=student,
#                 date=data["date"],
#                 defaults={
#                     "screen_time_hrs": data["screen_time_hrs"],
#                     "night_usage_hrs": data["night_usage_hrs"],
#                     "sleep_hours": data["sleep_hours"],
#                     "app_social_hrs": data["app_social_hrs"],
#                     "app_entertainment_hrs": data["app_entertainment_hrs"],
#                     "app_education_hrs": data["app_education_hrs"],
#                     "late_sleep_flag": data["late_sleep_flag"],
#                     "low_sleep_flag": data["low_sleep_flag"],
#                 }
#             )

#             # ✅ fetch *all available days* (latest 7 max)
#             behaviors = DailyBehavior.objects.filter(student=student).order_by("-date")[:7]

#             if behaviors.exists():
#                 features = np.array([
#                     [
#                         b.screen_time_hrs,
#                         b.night_usage_hrs,
#                         b.sleep_hours,
#                         b.app_social_hrs,
#                         b.app_entertainment_hrs,
#                         b.app_education_hrs,
#                         int(b.late_sleep_flag),
#                         int(b.low_sleep_flag),
#                     ]
#                     for b in reversed(behaviors)  # oldest → newest
#                 ])

#                 # ✅ scale features
#                 features_scaled = scaler.transform(features)

#                 # ✅ reshape dynamically (batch, timesteps, features)
#                 features_reshaped = features_scaled.reshape((1, features_scaled.shape[0], features_scaled.shape[1]))

#                 # ✅ predict
#                 prediction = lstm_model.predict(features_reshaped, verbose=0)
#                 risk_score = float(prediction[0][0])
#                 risk_label = "High Risk" if risk_score > 0.6 else "Low Risk"

#                 # ✅ store prediction
#                 RiskPrediction.objects.create(
#                     student=student,
#                     risk_label=risk_label,
#                     risk_score=risk_score,
#                     metadata={"model": "LSTM", "days_used": features.shape[0]}
#                 )

#             return redirect('student_dashboard')

#     else:
#         form = DailyBehaviorForm()

#     return render(request, 'students/add_behavior.html', {'form': form})

import os
import xgboost as xgb
from tensorflow.keras.models import load_model
# # BASE_DIR → project root (where manage.py is)
# BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# # Folder where all your models live
# MODEL_DIR = os.path.join(BASE_DIR, "models")  # <-- replace "models" with your folder name if different

# # Scaler & label encoder
# scaler = joblib.load(os.path.join(MODEL_DIR, "scaler.joblib"))
# label_encoder = joblib.load(os.path.join(MODEL_DIR, "label_encoder.joblib"))

# # LSTM models
# lstm_model = load_model(os.path.join(MODEL_DIR, "student_behavior_lstm_supervised.h5"))
# feature_extractor = load_model(os.path.join(MODEL_DIR, "student_behavior_feature_extractor.h5"))

# # XGBoost
# xgb_model = xgb.XGBClassifier()
# xgb_model.load_model(os.path.join(MODEL_DIR, "student_behavior_xgb.json"))


# # ----------------------
# # Utility
# # ----------------------
# def prepare_input(data, sequence_length=7, feature_count=8):
#     arr = np.array(data, dtype=float)
#     if arr.shape[0] < sequence_length:
#         padding = np.zeros((sequence_length - arr.shape[0], feature_count))
#         arr = np.vstack([padding, arr])
#     elif arr.shape[0] > sequence_length:
#         arr = arr[-sequence_length:]
#     return arr.reshape(1, sequence_length, feature_count)
 
# @login_required
# def add_daily_behavior(request):
#     student, _ = Student.objects.get_or_create(user=request.user)

#     if request.method == 'POST':
#         form = DailyBehaviorForm(request.POST)
#         if form.is_valid():
#             data = form.cleaned_data

#             # Save or update today's behavior
#             behavior, _ = DailyBehavior.objects.update_or_create(
#                 student=student,
#                 date=data["date"],
#                 defaults={
#                     "screen_time_hrs": data["screen_time_hrs"],
#                     "night_usage_hrs": data["night_usage_hrs"],
#                     "sleep_hours": data["sleep_hours"],
#                     "app_social_hrs": data["app_social_hrs"],
#                     "app_entertainment_hrs": data["app_entertainment_hrs"],
#                     "app_education_hrs": data["app_education_hrs"],
#                     "late_sleep_flag": data["late_sleep_flag"],
#                     "low_sleep_flag": data["low_sleep_flag"],
#                 }
#             )

#             # Fetch last 7 days of behaviors
#             behaviors = DailyBehavior.objects.filter(student=student).order_by("-date")[:7]

#             if behaviors.exists():
#                 features = np.array([
#                     [
#                         b.screen_time_hrs,
#                         b.night_usage_hrs,
#                         b.sleep_hours,
#                         b.app_social_hrs,
#                         b.app_entertainment_hrs,
#                         b.app_education_hrs,
#                         int(b.late_sleep_flag),
#                         int(b.low_sleep_flag),
#                     ]
#                     for b in reversed(behaviors)
#                 ])

#                 # Scale features
#                 features_scaled = scaler.transform(features)

#                 # Pad/truncate for LSTM
#                 X_input = prepare_input(features_scaled, sequence_length=7, feature_count=features_scaled.shape[1])

#                 # Extract features from LSTM
#                 lstm_features = feature_extractor.predict(X_input, verbose=0)

#                 # XGBoost prediction
#                 y_pred = xgb_model.predict(lstm_features)[0]
#                 y_proba = xgb_model.predict_proba(lstm_features)[0]
#                 risk_label = label_encoder.inverse_transform([y_pred])[0]

#                 # Save prediction
#                 RiskPrediction.objects.create(
#                     student=student,
#                     risk_label=risk_label,
#                     risk_score=float(np.max(y_proba)),
#                     metadata={
#                         "model": "LSTM+XGBoost",
#                         "days_used": features.shape[0],
#                         "probabilities": y_proba.tolist()
#                     }
#                 )

#             return redirect('student_dashboard')

#     else:
#         form = DailyBehaviorForm()

#     return render(request, 'students/add_behavior.html', {'form': form})

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
MODEL_DIR = os.path.join(BASE_DIR, "models")  # your models folder

# Load models
scaler = joblib.load(os.path.join(MODEL_DIR, "scaler.joblib"))
lstm_model = load_model(os.path.join(MODEL_DIR, "student_behavior_lstm_supervised.h5"))
feature_extractor = load_model(os.path.join(MODEL_DIR, "student_behavior_feature_extractor.h5"))
label_encoder = joblib.load(os.path.join(MODEL_DIR, "label_encoder.joblib"))

SEQUENCE_LENGTH = 7
FEATURE_COUNT = 8

# =========================
# Utility: Pad/truncate to 7 days
# =========================
def prepare_input(data, sequence_length=SEQUENCE_LENGTH, feature_count=FEATURE_COUNT):
    arr = np.array(data, dtype=float)
    if arr.shape[0] < sequence_length:
        padding = np.zeros((sequence_length - arr.shape[0], feature_count))
        arr = np.vstack([padding, arr])
    elif arr.shape[0] > sequence_length:
        arr = arr[-sequence_length:]
    return arr.reshape(1, sequence_length, feature_count)

# =========================
# Main view
# =========================
@login_required
def add_daily_behavior(request):
    student, _ = Student.objects.get_or_create(user=request.user)

    if request.method == "POST":
        form = DailyBehaviorForm(request.POST)
        if form.is_valid():
            data = form.cleaned_data

            # Save or update behavior for today
            behavior, created = DailyBehavior.objects.update_or_create(
                student=student,
                date=data["date"],
                defaults={
                    "screen_time_hrs": data["screen_time_hrs"],
                    "night_usage_hrs": data["night_usage_hrs"],
                    "sleep_hours": data["sleep_hours"],
                    "app_social_hrs": data["app_social_hrs"],
                    "app_entertainment_hrs": data["app_entertainment_hrs"],
                    "app_education_hrs": data["app_education_hrs"],
                    "late_sleep_flag": data["late_sleep_flag"],
                    "low_sleep_flag": data["low_sleep_flag"],
                }
            )

            # Fetch latest 7 days for prediction
            behaviors = DailyBehavior.objects.filter(student=student).order_by("-date")[:SEQUENCE_LENGTH]

            if behaviors.exists():
                # Oldest → newest
                features = np.array([
                    [
                        b.screen_time_hrs,
                        b.night_usage_hrs,
                        b.sleep_hours,
                        b.app_social_hrs,
                        b.app_entertainment_hrs,
                        b.app_education_hrs,
                        int(b.late_sleep_flag),
                        int(b.low_sleep_flag),
                    ]
                    for b in reversed(behaviors)
                ])

                # Scale + pad
                features_scaled = scaler.transform(features)
                features_prepared = prepare_input(features_scaled, SEQUENCE_LENGTH, FEATURE_COUNT)

                # Predict LSTM risk
                prediction = lstm_model.predict(features_prepared, verbose=0)
                risk_score = float(prediction[0][0])
                risk_label = "High Risk" if risk_score > 0.6 else "Low Risk"

                # Save prediction
                RiskPrediction.objects.create(
                    student=student,
                    risk_label=risk_label,
                    risk_score=risk_score,
                    metadata={"model": "LSTM", "days_used": features.shape[0]}
                )

            return redirect("student_dashboard")
    else:
        form = DailyBehaviorForm()

    return render(request, "students/add_behavior.html", {"form": form})

----------------------


dashboard.html

{% extends "base.html" %}
{% block content %}
{% load custom_filters %}

<div class="container mt-5">
    <h2 class="mb-4">📊 Student Dashboard</h2>

    <!-- Quick Action Cards -->
    <div class="row">
        <div class="col-md-4">
            <div class="card shadow-sm mb-3">
                <div class="card-body text-center">
                    <h5 class="card-title">➕ Add Daily Behavior</h5>
                    <a href="{% url 'upload_behavior' %}" class="btn btn-primary">Upload Behavior</a>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card shadow-sm mb-3">
                <div class="card-body text-center">
                    <h5 class="card-title">📈 Predictions</h5>
                    <a href="prediction_history" class="btn btn-success">Get Prediction</a>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card shadow-sm mb-3">
                <div class="card-body text-center">
                    <h5 class="card-title">📜 History</h5>
                    <a href="#" class="btn btn-secondary">View History</a>
                </div>
            </div>
        </div>
    </div>

    <!-- Student Info -->
    {% if student %}
    <div class="card mt-4 shadow-sm">
        <div class="card-body">
            <h4>{{ student.name }} ({{ student.student_id }})</h4>
            <p>Email: {{ student.email }}</p>
        </div>
    </div>
    {% endif %}

    <!-- Latest Behavior -->
    {% if latest_behavior %}
    <div class="card mt-4 shadow-sm">
        <div class="card-body">
            <h5>📌 Latest Behavior ({{ latest_behavior.date }})</h5>
            <ul>
                <li>Screen time: {{ latest_behavior.screen_time_hrs }} hrs</li>
                <li>Night usage: {{ latest_behavior.night_usage_hrs }} hrs</li>
                <li>Sleep: {{ latest_behavior.sleep_hours }} hrs</li>
                <li>Social apps: {{ latest_behavior.app_social_hrs }} hrs</li>
                <li>Entertainment: {{ latest_behavior.app_entertainment_hrs }} hrs</li>
                <li>Education: {{ latest_behavior.app_education_hrs }} hrs</li>
            </ul>

            <!-- Progress Bars -->
            <h6>Progress Overview</h6>
            <div class="progress mb-2">
                <div class="progress-bar bg-info" role="progressbar" 
                     style="width: {{ latest_behavior.screen_time_hrs|floatformat:1|mul:8 }}%;" 
                     aria-valuenow="{{ latest_behavior.screen_time_hrs }}" aria-valuemin="0" aria-valuemax="12">
                    Screen Time: {{ latest_behavior.screen_time_hrs }} hrs
                </div>
            </div>
            <div class="progress mb-2">
                <div class="progress-bar bg-success" role="progressbar" 
                     style="width: {{ latest_behavior.sleep_hours|floatformat:1|mul:10 }}%;" 
                     aria-valuenow="{{ latest_behavior.sleep_hours }}" aria-valuemin="0" aria-valuemax="12">
                    Sleep: {{ latest_behavior.sleep_hours }} hrs
                </div>
            </div>
        </div>
    </div>
    {% endif %}

    <!-- Latest Prediction -->
    {% if latest_prediction %}
    <div class="card mt-4 shadow-sm border-success">
        <div class="card-body">
            <h5>🧠 Latest Prediction</h5>
            <p><strong>Risk Label:</strong> {{ latest_prediction.risk_label }}</p>
            <p><strong>Risk Score:</strong> {{ latest_prediction.risk_score|floatformat:2 }}</p>
        </div>
    </div>
    {% endif %}

    <!-- Charts -->
     <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mt-8">
  <!-- Screen Time Chart -->
  <div class="p-6 bg-white rounded-2xl shadow-md">
    <h4 class="text-lg font-bold mb-3 flex items-center gap-2">
      📱 Screen Time Trend
    </h4>
    <canvas id="screenTimeChart" height="180"></canvas>
    <button onclick="screenChart.resetZoom()" class="text-blue-600 mt-2 underline">Reset Zoom</button>

  </div>

  <!-- Risk Score Chart -->
  <div class="p-6 bg-white rounded-2xl shadow-md">
     
    <h4 class="text-lg font-bold mb-3 flex items-center gap-2">
      ⚠️ Risk Score Trend
    </h4>
    <button onclick="riskChart.resetZoom()" class="text-pink-600 mt-2 underline">Reset Zoom</button>

    <canvas id="riskScoreChart" height="180"></canvas>
  </div>
</div>
    <div class="mt-4 text-end">
        <a href="{% url 'logout' %}" class="btn btn-danger">Logout</a>
    </div>
</div>

<!-- Chart.js -->
 <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
 <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-zoom@2.0.1"></script>
  <script>
  const dates = {{ dates|safe }};
  const screenTimes = {{ screen_times|safe }};
  const riskScores = {{ risk_scores|safe }};

  // --- Create gradient fills dynamically ---
  const ctx1 = document.getElementById('screenTimeChart').getContext('2d');
  const gradient1 = ctx1.createLinearGradient(0, 0, 0, 400);
  gradient1.addColorStop(0, 'rgba(54,162,235,0.5)');
  gradient1.addColorStop(1, 'rgba(54,162,235,0)');

  const ctx2 = document.getElementById('riskScoreChart').getContext('2d');
  const gradient2 = ctx2.createLinearGradient(0, 0, 0, 400);
  gradient2.addColorStop(0, 'rgba(255,99,132,0.5)');
  gradient2.addColorStop(1, 'rgba(255,99,132,0)');

  // --- Screen Time Chart ---
  const screenChart = new Chart(ctx1, {
    type: 'line',
    data: {
      labels: dates,
      datasets: [{
        label: 'Screen Time (hrs)',
        data: screenTimes,
        borderColor: '#36A2EB',
        backgroundColor: gradient1,
        fill: true,
        tension: 0.4,
        pointBackgroundColor: '#36A2EB',
        pointRadius: 5,
        pointHoverRadius: 7,
      }]
    },
    options: {
      responsive: true,
      plugins: {
        tooltip: {
          mode: 'index',
          intersect: false,
          callbacks: {
            label: function(ctx) {
              return ctx.dataset.label + ': ' + ctx.parsed.y.toFixed(2) + ' hrs';
            }
          }
        },
        legend: { labels: { color: '#333' } },
        zoom: {
          pan: { enabled: true, mode: 'x' },
          zoom: { wheel: { enabled: true }, pinch: { enabled: true }, mode: 'x' }
        }
      },
      interaction: { mode: 'nearest', intersect: false },
      scales: {
        y: {
          beginAtZero: true,
          title: { display: true, text: 'Hours' }
        },
        x: { title: { display: true, text: 'Date' } }
      }
    }
  });

  // --- Risk Score Chart ---
  const riskChart = new Chart(ctx2, {
    type: 'line',
    data: {
      labels: dates,
      datasets: [{
        label: 'Risk Score',
        data: riskScores,
        borderColor: '#FF6384',
        backgroundColor: gradient2,
        fill: true,
        tension: 0.4,
        pointBackgroundColor: riskScores.map(v => v > 0.6 ? '#FF0000' : '#00C853'),
        pointRadius: 6,
        pointHoverRadius: 8,
      }]
    },
    options: {
      responsive: true,
      plugins: {
        tooltip: {
          mode: 'index',
          intersect: false,
          callbacks: {
            label: function(ctx) {
              const risk = ctx.parsed.y > 0.6 ? '⚠️ High Risk' : '✅ Low Risk';
              return `${ctx.dataset.label}: ${ctx.parsed.y.toFixed(2)} (${risk})`;
            }
          }
        },
        legend: { labels: { color: '#333' } },
        zoom: {
          pan: { enabled: true, mode: 'x' },
          zoom: { wheel: { enabled: true }, pinch: { enabled: true }, mode: 'x' }
        }
      },
      scales: {
        y: {
          beginAtZero: true,
          max: 1,
          title: { display: true, text: 'Risk Probability' }
        },
        x: { title: { display: true, text: 'Date' } }
      }
    }
  });
</script>
{% endblock %}
-------------------

09-10-2025

teachers base.html page 

{% load static %}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>{% block title %}Teacher Dashboard{% endblock %}</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- Bootstrap & Icons -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet">

    <style>
        body {
            display: flex;
            min-height: 100vh;
            background-color: #f8f9fa;
            overflow-x: hidden;
        }
        /* Sidebar */
        .sidebar {
            width: 250px;
            background-color: #0d6efd;
            color: white;
            flex-shrink: 0;
            display: flex;
            flex-direction: column;
            position: fixed;
            top: 0;
            bottom: 0;
        }
        .sidebar h2 {
            text-align: center;
            padding: 20px;
            border-bottom: 1px solid rgba(255,255,255,0.2);
        }
        .sidebar a {
            color: white;
            padding: 12px 20px;
            text-decoration: none;
            display: block;
            transition: background 0.2s;
        }
        .sidebar a:hover {
            background-color: rgba(255,255,255,0.2);
        }
        .sidebar a.active {
            background-color: rgba(255,255,255,0.4);
        }
        /* Content */
        .main-content {
            margin-left: 250px;
            flex-grow: 1;
            padding: 30px;
        }
        footer {
            text-align: center;
            padding: 15px;
            background-color: #0d6efd;
            color: white;
            position: fixed;
            bottom: 0;
            width:100%;
        }
        .card {
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0,0,0,0.1);
        }
    </style>

    {% block extra_head %}{% endblock %}
</head>
<body>

<!-- 🔹 Sidebar -->
<div class="sidebar">
    <h2>👩‍🏫 Teacher</h2>
    <a href="{% url 'teacher_dashboard' %}" class="{% if request.resolver_match.url_name == 'teacher_dashboard' %}active{% endif %}">
        <i class="fa-solid fa-chart-line"></i> Dashboard
    </a>
    <a href="{% url 'add_student' %}" class="{% if request.resolver_match.url_name == 'add_student' %}active{% endif %}">
        <i class="fa-solid fa-user-plus"></i> Add Student
    </a>
    <a href="{% url 'student_list' %}" class="{% if request.resolver_match.url_name == 'student_list' %}active{% endif %}">
        <i class="fa-solid fa-users"></i> Student List
    </a>
    {% comment %} <a href="{% url 'prediction_overview' %}" class="{% if request.resolver_match.url_name == 'prediction_overview' %}active{% endif %}">
        <i class="fa-solid fa-brain"></i> Predictions
    </a> {% endcomment %}
    <a href="{% url 'logout' %}">
        <i class="fa-solid fa-right-from-bracket"></i> Logout
    </a>
    <div class="mt-auto text-center mb-3">
        <small>👋 {{ request.user.username }}</small>
    </div>
</div>

<!-- 🔹 Main Content -->
<div class="main-content">
    {% block content %}
    {% endblock %}
</div>

<!-- 🔹 Footer -->
<footer>
    &copy; {{ year|default:2025 }} SafeCampus AI - Teacher Portal
</footer>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
{% block extra_scripts %}{% endblock %}
</body>
</html>
---------------
dashboard.html
{% extends 'teachers/base.html' %}
{% block content %}
<div class="container mt-4">
  <h2>👩‍🏫 Teacher Dashboard</h2>
  <table class="table table-striped mt-3">
    <thead class="table-dark">
      <tr>
        <th>Student</th>
        <th>Email</th>
        <th>Last Risk Label</th>
        <th>Risk Score</th>
        <th>View History</th>
      </tr>
    </thead>
    <tbody>
      {% for s in students_data %}
      <tr>
        <td>{{ s.student.name }}</td>
        <td>{{ s.student.email }}</td>
        <td>
          {% if s.latest_pred %}
            {{ s.latest_pred.risk_label }}
          {% else %}
            <span class="text-muted">No Prediction</span>
          {% endif %}
        </td>
        <td>
          {% if s.latest_pred %}
            {{ s.latest_pred.risk_score|floatformat:2 }}
          {% else %}
            -
          {% endif %}
        </td>
        <td>
          {% comment %} <a href="{% url 'prediction_history' s.student.student_id %}" class="btn btn-sm btn-dark">View</a> {% endcomment %}
        </td>
      </tr>
      {% empty %}
      <tr><td colspan="5" class="text-muted text-center">No students available.</td></tr>
      {% endfor %}
    </tbody>
  </table>
</div>
{% endblock %}
-----------
12-10-2025
students/views.py

from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from .models import Student, DailyBehavior, RiskPrediction
from .forms import StudentForm, DailyBehaviorForm
from django.shortcuts import render, redirect
from django.contrib.auth import authenticate, login, logout
from django.contrib import messages
from django.contrib.auth.models import User
from django.contrib.auth.decorators import login_required
import joblib
import json
import numpy as np
import tensorflow as tf
 
 
def login_view(request):
    if request.method == "POST":
        username = request.POST["username"]
        password = request.POST["password"]
        user = authenticate(request, username=username, password=password)
        if user:
            login(request, user)
            return redirect("student_dashboard")   # redirect to student dashboard
        else:
            messages.error(request, "Invalid username or password")
    return render(request, "auth/login.html")

def signup_view(request):
    if request.method == "POST":
        username = request.POST["username"]
        password = request.POST["password"]
        confirm = request.POST["confirm"]

        if password != confirm:
            messages.error(request, "Passwords do not match")
        elif User.objects.filter(username=username).exists():
            messages.error(request, "Username already exists")
        else:
            user = User.objects.create_user(username=username, password=password)
            # Create linked Student profile
            Student.objects.create(
            user=user,                 # 🔑 link to user
            student_id=username,       # or generate unique roll no
            name=username              # you can add email, dept, etc
            )
            login(request, user)
            return redirect("students/student_list")   # go to dashboard after signup

    return render(request, "auth/signup.html")

@login_required
def logout_view(request):
    logout(request)
    return redirect("login")   # back to login page

 

# # Load models once (for performance)
# scaler = joblib.load("models/scaler.joblib")
# with open("models/student_behavior_xgb.json", "r") as f:
#     xgb_model_json = json.load(f)
# # Example: If using XGBoost you can reload like this:
# # import xgboost as xgb
# # xgb_model = xgb.Booster()
# # xgb_model.load_model("models/student_behavior_xgb.json")

# lstm_model = tf.keras.models.load_model("models/student_behavior_lstm_supervised.h5")


# # @login_required
# # def student_dashboard(request):
# #     student = Student.objects.filter(student_id=request.user.username).first()

# #     latest_behavior = None
# #     latest_prediction = None

# #     if student:
# #         latest_behavior = DailyBehavior.objects.filter(student=student).order_by("-date").first()

# #         if latest_behavior:
# #             # Prepare input features
# #             features = np.array([[
# #                 latest_behavior.screen_time_hrs,
# #                 latest_behavior.night_usage_hrs,
# #                 latest_behavior.sleep_hours,
# #                 latest_behavior.app_social_hrs,
# #                 latest_behavior.app_entertainment_hrs,
# #                 latest_behavior.app_education_hrs,
# #                 int(latest_behavior.late_sleep_flag),
# #                 int(latest_behavior.low_sleep_flag),
# #             ]])

# #             # Scale
# #             features_scaled = scaler.transform(features)

# #             # Predict (example with LSTM)
# #             prediction = lstm_model.predict(features_scaled, verbose=0)
# #             risk_score = float(prediction[0][0])  # depends on model output
# #             risk_label = "High Risk" if risk_score > 0.6 else "Low Risk"

# #             # Save prediction in DB
# #             latest_prediction = RiskPrediction.objects.create(
# #                 student=student,
# #                 risk_label=risk_label,
# #                 risk_score=risk_score,
# #                 metadata={"model": "LSTM"}
# #             )

# #     return render(request, "students/dashboard.html", {
# #         "student": student,
# #         "latest_behavior": latest_behavior,
# #         "latest_prediction": latest_prediction,
# #     })
 

# def student_dashboard(request):
#     if not request.user.is_authenticated:
#         return redirect("login")

#     # try to find student profile matching logged-in username
#     student = Student.objects.filter(student_id=request.user.username).first()

#     if not student:
#         return render(request, "students/dashboard.html", {
#             "error": "No student profile found for this user."
#         })

#     # load behaviors + predictions for that student
#     behaviors = student.behaviors.all().order_by("-date")[:10]
#     predictions = student.predictions.all().order_by("-timestamp")[:5]

#     return render(request, "students/dashboard.html", {
#         "student": student,
#         "behaviors": behaviors,
#         "predictions": predictions,
#     })

 
# Load models once
scaler = joblib.load("models/scaler.joblib")
lstm_model = tf.keras.models.load_model("models/student_behavior_lstm_supervised.h5")

# @login_required
# def student_dashboard(request):
#     # fetch the student profile linked to logged-in user
#     student = getattr(request.user, "student", None)

#     if not student:
#         return render(request, "students/dashboard.html", {
#             "error": "No student profile linked to this account."
#         })

#     latest_behavior = DailyBehavior.objects.filter(student=student).order_by("-date").first()
#     latest_prediction = None

#     if latest_behavior:
#         # prepare features
#         features = np.array([[
#             latest_behavior.screen_time_hrs,
#             latest_behavior.night_usage_hrs,
#             latest_behavior.sleep_hours,
#             latest_behavior.app_social_hrs,
#             latest_behavior.app_entertainment_hrs,
#             latest_behavior.app_education_hrs,
#             int(latest_behavior.late_sleep_flag),
#             int(latest_behavior.low_sleep_flag),
#         ]])

#         features_scaled = scaler.transform(features)

#         # predict with LSTM
#         prediction = lstm_model.predict(features_scaled, verbose=0)
#         risk_score = float(prediction[0][0])
#         risk_label = "High Risk" if risk_score > 0.6 else "Low Risk"

#         # save prediction
#         latest_prediction = RiskPrediction.objects.create(
#             student=student,
#             risk_label=risk_label,
#             risk_score=risk_score,
#             metadata={"model": "LSTM"}
#         )

#     return render(request, "students/dashboard.html", {
#         "student": student,
#         "latest_behavior": latest_behavior,
#         "latest_prediction": latest_prediction,
#     })

 
# @login_required
# def student_dashboard(request):
#     # ensure student profile exists
#     student, created = Student.objects.get_or_create(user=request.user)

#     latest_behavior = DailyBehavior.objects.filter(student=student).order_by("-date").first()
#     latest_prediction = None

#     if latest_behavior:
#         # prepare features
#         features = np.array([[ 
#             latest_behavior.screen_time_hrs,
#             latest_behavior.night_usage_hrs,
#             latest_behavior.sleep_hours,
#             latest_behavior.app_social_hrs,
#             latest_behavior.app_entertainment_hrs,
#             latest_behavior.app_education_hrs,
#             int(latest_behavior.late_sleep_flag),
#             int(latest_behavior.low_sleep_flag),
#         ]])

#         features_scaled = scaler.transform(features)

#         # predict with LSTM
#         prediction = lstm_model.predict(features_scaled, verbose=0)
#         risk_score = float(prediction[0][0])
#         risk_label = "High Risk" if risk_score > 0.6 else "Low Risk"

#         # save prediction
#         latest_prediction = RiskPrediction.objects.create(
#             student=student,
#             risk_label=risk_label,
#             risk_score=risk_score,
#             metadata={"model": "LSTM"}
#         )

#     return render(request, "students/dashboard.html", {
#         "student": student,
#         "latest_behavior": latest_behavior,
#         "latest_prediction": latest_prediction,
#         "created": created  # optional, to show “Profile created” message
#     })
# new
@login_required
def student_dashboard(request):
    student, created = Student.objects.get_or_create(user=request.user)

    latest_behavior = DailyBehavior.objects.filter(student=student).order_by("-date").first()
    latest_prediction = None
    behaviors = []
    predictions = []

    if latest_behavior:
        # ✅ last 7 days data (oldest → newest)
        behaviors = DailyBehavior.objects.filter(student=student).order_by("date")[:7]
        predictions = RiskPrediction.objects.filter(student=student).order_by("timestamp")[:7]

        if len(behaviors) == 7:
            # build feature matrix (7 days × 8 features)
            features = np.array([
                [
                    b.screen_time_hrs,
                    b.night_usage_hrs,
                    b.sleep_hours,
                    b.app_social_hrs,
                    b.app_entertainment_hrs,
                    b.app_education_hrs,
                    int(b.late_sleep_flag),
                    int(b.low_sleep_flag),
                ]
                for b in reversed(behaviors)
            ])

            # scale and predict
            features_scaled = scaler.transform(features)
            features_reshaped = features_scaled.reshape((1, 7, 8))
            prediction = lstm_model.predict(features_reshaped, verbose=0)
            risk_score = float(prediction[0][0])
            risk_label = "High Risk" if risk_score > 0.6 else "Low Risk"

            # save prediction
            latest_prediction = RiskPrediction.objects.create(
                student=student,
                risk_label=risk_label,
                risk_score=risk_score,
                metadata={"model": "LSTM", "days_used": 7}
            )

    # ✅ prepare data for charts
    behavior_dates = [b.date.strftime("%b %d") for b in behaviors]
    screen_times = [float(b.screen_time_hrs) for b in behaviors]
    risk_scores = [float(p.risk_score) for p in predictions] if predictions else []

    context = {
        "student": student,
        "latest_behavior": latest_behavior,
        "latest_prediction": latest_prediction,
        "created": created,
        "behaviors": behaviors,
        "predictions": predictions,
        "dates": behavior_dates,
        "screen_times": screen_times,
        "risk_scores": risk_scores,
    }

    return render(request, "students/dashboard.html", context)



@login_required
def add_student(request):
    if request.method == "POST":
        form = StudentForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect("student_list")  # redirect to list page after saving
    else:
        form = StudentForm()
    return render(request, "students/student_form.html", {"form": form})
 
@login_required
def upload_behavior(request):
    if request.method == "POST":
        form = DailyBehaviorForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect("behavior_success")
  # you can create a success page
    else:
        form = DailyBehaviorForm()
    return render(request, "students/behavior_form.html", {"form": form})
@login_required
def behavior_success(request):
    return render(request, "students/behavior_success.html")

@login_required
def prediction_history(request, student_id):
    student = get_object_or_404(Student, id=student_id)
    predictions = RiskPrediction.objects.filter(student=student).order_by("-timestamp")
    return render(
        request,
        "students/history.html",
        {"student": student, "predictions": predictions},
    )
 
@login_required
def student_list(request):
    students = Student.objects.all()
    return render(request, "students/student_list.html", {"students": students})

# @login_required
# def add_daily_behavior(request):
#     student, _ = Student.objects.get_or_create(user=request.user)

#     if request.method == 'POST':
#         form = DailyBehaviorForm(request.POST)
#         if form.is_valid():
#             data = form.cleaned_data

#             # ✅ Prevent duplicates
#             behavior, created = DailyBehavior.objects.update_or_create(
#                 student=student,
#                 date=data["date"],
#                 defaults={
#                     "screen_time_hrs": data["screen_time_hrs"],
#                     "night_usage_hrs": data["night_usage_hrs"],
#                     "sleep_hours": data["sleep_hours"],
#                     "app_social_hrs": data["app_social_hrs"],
#                     "app_entertainment_hrs": data["app_entertainment_hrs"],
#                     "app_education_hrs": data["app_education_hrs"],
#                     "late_sleep_flag": data["late_sleep_flag"],
#                     "low_sleep_flag": data["low_sleep_flag"],
#                 }
#             )

#             # ✅ fetch *all available days* (latest 7 max)
#             behaviors = DailyBehavior.objects.filter(student=student).order_by("-date")[:7]

#             if behaviors.exists():
#                 features = np.array([
#                     [
#                         b.screen_time_hrs,
#                         b.night_usage_hrs,
#                         b.sleep_hours,
#                         b.app_social_hrs,
#                         b.app_entertainment_hrs,
#                         b.app_education_hrs,
#                         int(b.late_sleep_flag),
#                         int(b.low_sleep_flag),
#                     ]
#                     for b in reversed(behaviors)  # oldest → newest
#                 ])

#                 # ✅ scale features
#                 features_scaled = scaler.transform(features)

#                 # ✅ reshape dynamically (batch, timesteps, features)
#                 features_reshaped = features_scaled.reshape((1, features_scaled.shape[0], features_scaled.shape[1]))

#                 # ✅ predict
#                 prediction = lstm_model.predict(features_reshaped, verbose=0)
#                 risk_score = float(prediction[0][0])
#                 risk_label = "High Risk" if risk_score > 0.6 else "Low Risk"

#                 # ✅ store prediction
#                 RiskPrediction.objects.create(
#                     student=student,
#                     risk_label=risk_label,
#                     risk_score=risk_score,
#                     metadata={"model": "LSTM", "days_used": features.shape[0]}
#                 )

#             return redirect('student_dashboard')

#     else:
#         form = DailyBehaviorForm()

#     return render(request, 'students/add_behavior.html', {'form': form})

import os
import xgboost as xgb
from tensorflow.keras.models import load_model
# # BASE_DIR → project root (where manage.py is)
# BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# # Folder where all your models live
# MODEL_DIR = os.path.join(BASE_DIR, "models")  # <-- replace "models" with your folder name if different

# # Scaler & label encoder
# scaler = joblib.load(os.path.join(MODEL_DIR, "scaler.joblib"))
# label_encoder = joblib.load(os.path.join(MODEL_DIR, "label_encoder.joblib"))

# # LSTM models
# lstm_model = load_model(os.path.join(MODEL_DIR, "student_behavior_lstm_supervised.h5"))
# feature_extractor = load_model(os.path.join(MODEL_DIR, "student_behavior_feature_extractor.h5"))

# # XGBoost
# xgb_model = xgb.XGBClassifier()
# xgb_model.load_model(os.path.join(MODEL_DIR, "student_behavior_xgb.json"))


# # ----------------------
# # Utility
# # ----------------------
# def prepare_input(data, sequence_length=7, feature_count=8):
#     arr = np.array(data, dtype=float)
#     if arr.shape[0] < sequence_length:
#         padding = np.zeros((sequence_length - arr.shape[0], feature_count))
#         arr = np.vstack([padding, arr])
#     elif arr.shape[0] > sequence_length:
#         arr = arr[-sequence_length:]
#     return arr.reshape(1, sequence_length, feature_count)
 
# @login_required
# def add_daily_behavior(request):
#     student, _ = Student.objects.get_or_create(user=request.user)

#     if request.method == 'POST':
#         form = DailyBehaviorForm(request.POST)
#         if form.is_valid():
#             data = form.cleaned_data

#             # Save or update today's behavior
#             behavior, _ = DailyBehavior.objects.update_or_create(
#                 student=student,
#                 date=data["date"],
#                 defaults={
#                     "screen_time_hrs": data["screen_time_hrs"],
#                     "night_usage_hrs": data["night_usage_hrs"],
#                     "sleep_hours": data["sleep_hours"],
#                     "app_social_hrs": data["app_social_hrs"],
#                     "app_entertainment_hrs": data["app_entertainment_hrs"],
#                     "app_education_hrs": data["app_education_hrs"],
#                     "late_sleep_flag": data["late_sleep_flag"],
#                     "low_sleep_flag": data["low_sleep_flag"],
#                 }
#             )

#             # Fetch last 7 days of behaviors
#             behaviors = DailyBehavior.objects.filter(student=student).order_by("-date")[:7]

#             if behaviors.exists():
#                 features = np.array([
#                     [
#                         b.screen_time_hrs,
#                         b.night_usage_hrs,
#                         b.sleep_hours,
#                         b.app_social_hrs,
#                         b.app_entertainment_hrs,
#                         b.app_education_hrs,
#                         int(b.late_sleep_flag),
#                         int(b.low_sleep_flag),
#                     ]
#                     for b in reversed(behaviors)
#                 ])

#                 # Scale features
#                 features_scaled = scaler.transform(features)

#                 # Pad/truncate for LSTM
#                 X_input = prepare_input(features_scaled, sequence_length=7, feature_count=features_scaled.shape[1])

#                 # Extract features from LSTM
#                 lstm_features = feature_extractor.predict(X_input, verbose=0)

#                 # XGBoost prediction
#                 y_pred = xgb_model.predict(lstm_features)[0]
#                 y_proba = xgb_model.predict_proba(lstm_features)[0]
#                 risk_label = label_encoder.inverse_transform([y_pred])[0]

#                 # Save prediction
#                 RiskPrediction.objects.create(
#                     student=student,
#                     risk_label=risk_label,
#                     risk_score=float(np.max(y_proba)),
#                     metadata={
#                         "model": "LSTM+XGBoost",
#                         "days_used": features.shape[0],
#                         "probabilities": y_proba.tolist()
#                     }
#                 )

#             return redirect('student_dashboard')

#     else:
#         form = DailyBehaviorForm()

#     return render(request, 'students/add_behavior.html', {'form': form})

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
MODEL_DIR = os.path.join(BASE_DIR, "models")  # your models folder

# Load models
scaler = joblib.load(os.path.join(MODEL_DIR, "scaler.joblib"))
lstm_model = load_model(os.path.join(MODEL_DIR, "student_behavior_lstm_supervised.h5"))
feature_extractor = load_model(os.path.join(MODEL_DIR, "student_behavior_feature_extractor.h5"))
label_encoder = joblib.load(os.path.join(MODEL_DIR, "label_encoder.joblib"))

SEQUENCE_LENGTH = 7
FEATURE_COUNT = 8

# =========================
# Utility: Pad/truncate to 7 days
# =========================
def prepare_input(data, sequence_length=SEQUENCE_LENGTH, feature_count=FEATURE_COUNT):
    arr = np.array(data, dtype=float)
    if arr.shape[0] < sequence_length:
        padding = np.zeros((sequence_length - arr.shape[0], feature_count))
        arr = np.vstack([padding, arr])
    elif arr.shape[0] > sequence_length:
        arr = arr[-sequence_length:]
    return arr.reshape(1, sequence_length, feature_count)

# =========================
# Main view
# =========================
@login_required
def add_daily_behavior(request):
    student, _ = Student.objects.get_or_create(user=request.user)

    if request.method == "POST":
        form = DailyBehaviorForm(request.POST)
        if form.is_valid():
            data = form.cleaned_data

            # Save or update behavior for today
            behavior, created = DailyBehavior.objects.update_or_create(
                student=student,
                date=data["date"],
                defaults={
                    "screen_time_hrs": data["screen_time_hrs"],
                    "night_usage_hrs": data["night_usage_hrs"],
                    "sleep_hours": data["sleep_hours"],
                    "app_social_hrs": data["app_social_hrs"],
                    "app_entertainment_hrs": data["app_entertainment_hrs"],
                    "app_education_hrs": data["app_education_hrs"],
                    "late_sleep_flag": data["late_sleep_flag"],
                    "low_sleep_flag": data["low_sleep_flag"],
                }
            )

            # Fetch latest 7 days for prediction
            behaviors = DailyBehavior.objects.filter(student=student).order_by("-date")[:SEQUENCE_LENGTH]

            if behaviors.exists():
                # Oldest → newest
                features = np.array([
                    [
                        b.screen_time_hrs,
                        b.night_usage_hrs,
                        b.sleep_hours,
                        b.app_social_hrs,
                        b.app_entertainment_hrs,
                        b.app_education_hrs,
                        int(b.late_sleep_flag),
                        int(b.low_sleep_flag),
                    ]
                    for b in reversed(behaviors)
                ])

                # Scale + pad
                features_scaled = scaler.transform(features)
                features_prepared = prepare_input(features_scaled, SEQUENCE_LENGTH, FEATURE_COUNT)

                # Predict LSTM risk
                prediction = lstm_model.predict(features_prepared, verbose=0)
                risk_score = float(prediction[0][0])
                risk_label = "High Risk" if risk_score > 0.6 else "Low Risk"

                # Save prediction
                RiskPrediction.objects.create(
                    student=student,
                    risk_label=risk_label,
                    risk_score=risk_score,
                    metadata={"model": "LSTM", "days_used": features.shape[0]}
                )

            return redirect("student_dashboard")
    else:
        form = DailyBehaviorForm()

    return render(request, "students/add_behavior.html", {"form": form}) 
---------------------------------------
14-10-2025
stuents/views.py 
from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from .models import Student, DailyBehavior, RiskPrediction
from .forms import StudentForm, DailyBehaviorForm
from django.shortcuts import render, redirect
from django.contrib.auth import authenticate, login, logout
from django.contrib import messages
from django.contrib.auth.models import User
from django.contrib.auth.decorators import login_required
import joblib
import json
import numpy as np
import tensorflow as tf
import os
import xgboost as xgb
from tensorflow.keras.models import load_model
 
 
def login_view(request):
    if request.method == "POST":
        username = request.POST["username"]
        password = request.POST["password"]
        user = authenticate(request, username=username, password=password)
        if user:
            login(request, user)
            return redirect("student_dashboard")   # redirect to student dashboard
        else:
            messages.error(request, "Invalid username or password")
    return render(request, "auth/login.html")

def signup_view(request):
    if request.method == "POST":
        username = request.POST["username"]
        password = request.POST["password"]
        confirm = request.POST["confirm"]

        if password != confirm:
            messages.error(request, "Passwords do not match")
        elif User.objects.filter(username=username).exists():
            messages.error(request, "Username already exists")
        else:
            user = User.objects.create_user(username=username, password=password)
            # Create linked Student profile
            Student.objects.create(
            user=user,                 # 🔑 link to user
            student_id=username,       # or generate unique roll no
            name=username              # you can add email, dept, etc
            )
            login(request, user)
            return redirect("students/student_list")   # go to dashboard after signup

    return render(request, "auth/signup.html")

@login_required
def logout_view(request):
    logout(request)
    return redirect("login")   # back to login page

 
# Load models once
scaler = joblib.load("models/scaler.joblib")
lstm_model = tf.keras.models.load_model("models/student_behavior_lstm_supervised.h5")

@login_required
def student_dashboard(request):
    student, created = Student.objects.get_or_create(user=request.user)

    latest_behavior = DailyBehavior.objects.filter(student=student).order_by("-date").first()
    latest_prediction = None
    behaviors = []
    predictions = []

    if latest_behavior:
        # ✅ last 7 days data (oldest → newest)
        behaviors = DailyBehavior.objects.filter(student=student).order_by("date")[:7]
        predictions = RiskPrediction.objects.filter(student=student).order_by("timestamp")[:7]

        if len(behaviors) == 7:
            # build feature matrix (7 days × 8 features)
            features = np.array([
                [
                    b.screen_time_hrs,
                    b.night_usage_hrs,
                    b.sleep_hours,
                    b.app_social_hrs,
                    b.app_entertainment_hrs,
                    b.app_education_hrs,
                    int(b.late_sleep_flag),
                    int(b.low_sleep_flag),
                ]
                for b in reversed(behaviors)
            ])

            # scale and predict
            features_scaled = scaler.transform(features)
            features_reshaped = features_scaled.reshape((1, 7, 8))
            prediction = lstm_model.predict(features_reshaped, verbose=0)
            risk_score = float(prediction[0][0])
            risk_label = "High Risk" if risk_score > 0.6 else "Low Risk"

            # save prediction
            latest_prediction = RiskPrediction.objects.create(
                student=student,
                risk_label=risk_label,
                risk_score=risk_score,
                metadata={"model": "LSTM", "days_used": 7}
            )

    # ✅ prepare data for charts
    behavior_dates = [b.date.strftime("%b %d") for b in behaviors]
    screen_times = [float(b.screen_time_hrs) for b in behaviors]
    risk_scores = [float(p.risk_score) for p in predictions] if predictions else []

    context = {
        "student": student,
        "latest_behavior": latest_behavior,
        "latest_prediction": latest_prediction,
        "created": created,
        "behaviors": behaviors,
        "predictions": predictions,
        "dates": behavior_dates,
        "screen_times": screen_times,
        "risk_scores": risk_scores,
    }

    return render(request, "students/dashboard.html", context)


@login_required
def add_student(request):
    if request.method == "POST":
        form = StudentForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect("student_list")  # redirect to list page after saving
    else:
        form = StudentForm()
    return render(request, "students/student_form.html", {"form": form})
 
@login_required
def upload_behavior(request):
    if request.method == "POST":
        form = DailyBehaviorForm(request.POST)
        if form.is_valid():
            # form.save()
            behavior = form.save()
            student = behavior.student  # ✅ get related student instance
            return redirect("behavior_success", student_id=student.student_id)
  # you can create a success page
    else:
        form = DailyBehaviorForm()
    return render(request, "students/behavior_form.html", {"form": form})
# @login_required
# def behavior_success(request):
#     return render(request, "students/behavior_success.html")
@login_required
def behavior_success(request, student_id):
    student = get_object_or_404(Student, student_id=student_id)
    return render(request, "students/behavior_success.html", {"student": student})

@login_required
def prediction_history(request, student_id):
    student = get_object_or_404(Student, student_id=student_id)
    predictions = RiskPrediction.objects.filter(student=student).order_by("-timestamp")
    return render(
        request,
        "students/history.html",
        {"student": student, "predictions": predictions},
    )
 
@login_required
def student_list(request):
    students = Student.objects.all()
    return render(request, "students/student_list.html", {"students": students})

 
 
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
MODEL_DIR = os.path.join(BASE_DIR, "models")  # your models folder

# Load models
scaler = joblib.load(os.path.join(MODEL_DIR, "scaler.joblib"))
lstm_model = load_model(os.path.join(MODEL_DIR, "student_behavior_lstm_supervised.h5"))
feature_extractor = load_model(os.path.join(MODEL_DIR, "student_behavior_feature_extractor.h5"))
label_encoder = joblib.load(os.path.join(MODEL_DIR, "label_encoder.joblib"))

SEQUENCE_LENGTH = 7
FEATURE_COUNT = 8

# =========================
# Utility: Pad/truncate to 7 days
# =========================
def prepare_input(data, sequence_length=SEQUENCE_LENGTH, feature_count=FEATURE_COUNT):
    arr = np.array(data, dtype=float)
    if arr.shape[0] < sequence_length:
        padding = np.zeros((sequence_length - arr.shape[0], feature_count))
        arr = np.vstack([padding, arr])
    elif arr.shape[0] > sequence_length:
        arr = arr[-sequence_length:]
    return arr.reshape(1, sequence_length, feature_count)

# =========================
# Main view
# =========================
@login_required
def add_daily_behavior(request):
    student, _ = Student.objects.get_or_create(user=request.user)

    if request.method == "POST":
        form = DailyBehaviorForm(request.POST)
        if form.is_valid():
            data = form.cleaned_data

            # Save or update behavior for today
            behavior, created = DailyBehavior.objects.update_or_create(
                student=student,
                date=data["date"],
                defaults={
                    "screen_time_hrs": data["screen_time_hrs"],
                    "night_usage_hrs": data["night_usage_hrs"],
                    "sleep_hours": data["sleep_hours"],
                    "app_social_hrs": data["app_social_hrs"],
                    "app_entertainment_hrs": data["app_entertainment_hrs"],
                    "app_education_hrs": data["app_education_hrs"],
                    "late_sleep_flag": data["late_sleep_flag"],
                    "low_sleep_flag": data["low_sleep_flag"],
                }
            )

            # Fetch latest 7 days for prediction
            behaviors = DailyBehavior.objects.filter(student=student).order_by("-date")[:SEQUENCE_LENGTH]

            if behaviors.exists():
                # Oldest → newest
                features = np.array([
                    [
                        b.screen_time_hrs,
                        b.night_usage_hrs,
                        b.sleep_hours,
                        b.app_social_hrs,
                        b.app_entertainment_hrs,
                        b.app_education_hrs,
                        int(b.late_sleep_flag),
                        int(b.low_sleep_flag),
                    ]
                    for b in reversed(behaviors)
                ])

                # Scale + pad
                features_scaled = scaler.transform(features)
                features_prepared = prepare_input(features_scaled, SEQUENCE_LENGTH, FEATURE_COUNT)

                # Predict LSTM risk
                prediction = lstm_model.predict(features_prepared, verbose=0)
                risk_score = float(prediction[0][0])
                risk_label = "High Risk" if risk_score > 0.6 else "Low Risk"

                # Save prediction
                RiskPrediction.objects.create(
                    student=student,
                    risk_label=risk_label,
                    risk_score=risk_score,
                    metadata={"model": "LSTM", "days_used": features.shape[0]}
                )

            return redirect("student_dashboard")
    else:
        form = DailyBehaviorForm()

    return render(request, "students/add_behavior.html", {"form": form})

------------------------
17:17
views.py 

from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from .models import Student, DailyBehavior, RiskPrediction
from .forms import StudentForm, DailyBehaviorForm
from django.shortcuts import render, redirect
from django.contrib.auth import authenticate, login, logout
from django.contrib import messages
from django.contrib.auth.models import User
from django.contrib.auth.decorators import login_required
import joblib
import json
import numpy as np
import tensorflow as tf
import os
import xgboost as xgb
from tensorflow.keras.models import load_model
import random
from django.http import JsonResponse
 
 
def login_view(request):
    if request.method == "POST":
        username = request.POST["username"]
        password = request.POST["password"]
        user = authenticate(request, username=username, password=password)
        if user:
            login(request, user)
            return redirect("student_dashboard")   # redirect to student dashboard
        else:
            messages.error(request, "Invalid username or password")
    return render(request, "auth/login.html")

def signup_view(request):
    if request.method == "POST":
        username = request.POST["username"]
        password = request.POST["password"]
        confirm = request.POST["confirm"]

        if password != confirm:
            messages.error(request, "Passwords do not match")
        elif User.objects.filter(username=username).exists():
            messages.error(request, "Username already exists")
        else:
            user = User.objects.create_user(username=username, password=password)
            # Create linked Student profile
            Student.objects.create(
            user=user,                 # 🔑 link to user
            student_id=username,       # or generate unique roll no
            name=username              # you can add email, dept, etc
            )
            login(request, user)
            return redirect("students/student_list")   # go to dashboard after signup

    return render(request, "auth/signup.html")

@login_required
def logout_view(request):
    logout(request)
    return redirect("login")   # back to login page

 
# Load models once
scaler = joblib.load("models/scaler.joblib")
lstm_model = tf.keras.models.load_model("models/student_behavior_lstm_supervised.h5")

@login_required
def student_dashboard(request):
    student, created = Student.objects.get_or_create(user=request.user)

    latest_behavior = DailyBehavior.objects.filter(student=student).order_by("-date").first()
    latest_prediction = None
    behaviors = []
    predictions = []

    if latest_behavior:
        # ✅ last 7 days data (oldest → newest)
        behaviors = DailyBehavior.objects.filter(student=student).order_by("date")[:7]
        predictions = RiskPrediction.objects.filter(student=student).order_by("timestamp")[:7]

        if len(behaviors) == 7:
            # build feature matrix (7 days × 8 features)
            features = np.array([
                [
                    b.screen_time_hrs,
                    b.night_usage_hrs,
                    b.sleep_hours,
                    b.app_social_hrs,
                    b.app_entertainment_hrs,
                    b.app_education_hrs,
                    int(b.late_sleep_flag),
                    int(b.low_sleep_flag),
                ]
                for b in reversed(behaviors)
            ])

            # scale and predict
            features_scaled = scaler.transform(features)
            features_reshaped = features_scaled.reshape((1, 7, 8))
            prediction = lstm_model.predict(features_reshaped, verbose=0)
            risk_score = float(prediction[0][0])
            risk_label = "High Risk" if risk_score > 0.6 else "Low Risk"

            # save prediction
            latest_prediction = RiskPrediction.objects.create(
                student=student,
                risk_label=risk_label,
                risk_score=risk_score,
                metadata={"model": "LSTM", "days_used": 7}
            )

    # ✅ prepare data for charts
    behavior_dates = [b.date.strftime("%b %d") for b in behaviors]
    screen_times = [float(b.screen_time_hrs) for b in behaviors]
    risk_scores = [float(p.risk_score) for p in predictions] if predictions else []
    # ✅ New: Daily Care Tips
    daily_tips = [
        "💧 Drink at least 8 glasses of water daily to stay hydrated.",
        "🧠 Take a 5-min break after every hour of study to refresh your mind.",
        "😴 Maintain 7–8 hours of sleep for better focus and memory.",
        "🚶‍♂️ Go for a short walk during study breaks to reduce stress.",
        "📵 Avoid screen time 1 hour before bed to improve sleep quality.",
        "🥗 Eat light meals during study hours for better concentration.",
        "💬 Stay connected with friends or mentors if you feel stressed.",
        "🪴 Keep your study space clean and ventilated for fresh energy.",
        "📅 Plan your daily goals each morning to reduce anxiety.",
        "🎧 Listen to soft instrumental music while studying to improve focus."
    ]
    selected_tip = random.choice(daily_tips)
    context = {
        "student": student,
        "latest_behavior": latest_behavior,
        "latest_prediction": latest_prediction,
        "created": created,
        "behaviors": behaviors,
        "predictions": predictions,
        "dates": behavior_dates,
        "screen_times": screen_times,
        "risk_scores": risk_scores,
        "daily_tip": selected_tip,  # 🆕 Add this
    }

    return render(request, "students/dashboard.html", context)


@login_required
def add_student(request):
    if request.method == "POST":
        form = StudentForm(request.POST)
        if form.is_valid():
            form.save()
            return redirect("student_list")  # redirect to list page after saving
    else:
        form = StudentForm()
    return render(request, "students/student_form.html", {"form": form})
 
@login_required
def upload_behavior(request):
    if request.method == "POST":
        form = DailyBehaviorForm(request.POST)
        if form.is_valid():
            # form.save()
            behavior = form.save()
            student = behavior.student  # ✅ get related student instance
            return redirect("behavior_success", student_id=student.student_id)
  # you can create a success page
    else:
        form = DailyBehaviorForm()
    return render(request, "students/behavior_form.html", {"form": form})
# @login_required
# def behavior_success(request):
#     return render(request, "students/behavior_success.html")
@login_required
def behavior_success(request, student_id):
    student = get_object_or_404(Student, student_id=student_id)
    return render(request, "students/behavior_success.html", {"student": student})

@login_required
def prediction_history(request, student_id):
    student = get_object_or_404(Student, student_id=student_id)
    predictions = RiskPrediction.objects.filter(student=student).order_by("-timestamp")
    return render(
        request,
        "students/history.html",
        {"student": student, "predictions": predictions},
    )
 
@login_required
def student_list(request):
    students = Student.objects.all()
    return render(request, "students/student_list.html", {"students": students})

 
 
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
MODEL_DIR = os.path.join(BASE_DIR, "models")  # your models folder

# Load models
scaler = joblib.load(os.path.join(MODEL_DIR, "scaler.joblib"))
lstm_model = load_model(os.path.join(MODEL_DIR, "student_behavior_lstm_supervised.h5"))
feature_extractor = load_model(os.path.join(MODEL_DIR, "student_behavior_feature_extractor.h5"))
label_encoder = joblib.load(os.path.join(MODEL_DIR, "label_encoder.joblib"))

SEQUENCE_LENGTH = 7
FEATURE_COUNT = 8

# =========================
# Utility: Pad/truncate to 7 days
# =========================
def prepare_input(data, sequence_length=SEQUENCE_LENGTH, feature_count=FEATURE_COUNT):
    arr = np.array(data, dtype=float)
    if arr.shape[0] < sequence_length:
        padding = np.zeros((sequence_length - arr.shape[0], feature_count))
        arr = np.vstack([padding, arr])
    elif arr.shape[0] > sequence_length:
        arr = arr[-sequence_length:]
    return arr.reshape(1, sequence_length, feature_count)

# =========================
# Main view
# =========================
@login_required
def add_daily_behavior(request):
    student, _ = Student.objects.get_or_create(user=request.user)

    if request.method == "POST":
        form = DailyBehaviorForm(request.POST)
        if form.is_valid():
            data = form.cleaned_data

            # Save or update behavior for today
            behavior, created = DailyBehavior.objects.update_or_create(
                student=student,
                date=data["date"],
                defaults={
                    "screen_time_hrs": data["screen_time_hrs"],
                    "night_usage_hrs": data["night_usage_hrs"],
                    "sleep_hours": data["sleep_hours"],
                    "app_social_hrs": data["app_social_hrs"],
                    "app_entertainment_hrs": data["app_entertainment_hrs"],
                    "app_education_hrs": data["app_education_hrs"],
                    "late_sleep_flag": data["late_sleep_flag"],
                    "low_sleep_flag": data["low_sleep_flag"],
                }
            )

            # Fetch latest 7 days for prediction
            behaviors = DailyBehavior.objects.filter(student=student).order_by("-date")[:SEQUENCE_LENGTH]

            if behaviors.exists():
                # Oldest → newest
                features = np.array([
                    [
                        b.screen_time_hrs,
                        b.night_usage_hrs,
                        b.sleep_hours,
                        b.app_social_hrs,
                        b.app_entertainment_hrs,
                        b.app_education_hrs,
                        int(b.late_sleep_flag),
                        int(b.low_sleep_flag),
                    ]
                    for b in reversed(behaviors)
                ])

                # Scale + pad
                features_scaled = scaler.transform(features)
                features_prepared = prepare_input(features_scaled, SEQUENCE_LENGTH, FEATURE_COUNT)

                # Predict LSTM risk
                prediction = lstm_model.predict(features_prepared, verbose=0)
                risk_score = float(prediction[0][0])
                risk_label = "High Risk" if risk_score > 0.6 else "Low Risk"

                # Save prediction
                RiskPrediction.objects.create(
                    student=student,
                    risk_label=risk_label,
                    risk_score=risk_score,
                    metadata={"model": "LSTM", "days_used": features.shape[0]}
                )

            return redirect("student_dashboard")
    else:
        form = DailyBehaviorForm()

    return render(request, "students/add_behavior.html", {"form": form})

 
def ai_chatbot(request):
    query = request.GET.get("q", "").lower()

    tips = [
        "💧 Drink water regularly to stay alert during classes!",
        "📚 Take a 5-minute break after every hour of study.",
        "😴 Try to sleep at least 7-8 hours a day.",
        "🌿 Go for a short walk to reduce screen fatigue.",
        "💭 Practice deep breathing for 2 minutes to reduce stress.",
        "🕒 Keep a fixed study schedule and stick to it."
    ]

    responses = {
        "stress": "Try meditation or deep breathing for 5 minutes. It calms your mind.",
        "study": "Study smart — 50 minutes focus + 10 minutes break is best.",
        "sleep": "Avoid screen time before bed and get at least 7 hours of sleep.",
        "phone": "Keep your phone away while studying for better concentration.",
        "exam": "Don’t panic! Revise key points and take breaks to refresh your mind.",
    }

    # Match response
    reply = None
    for keyword, ans in responses.items():
        if keyword in query:
            reply = ans
            break

    # Default fallback
    if not reply:
        reply = random.choice(tips)

    return JsonResponse({"reply": reply})





---------------

chatbotfeatues.

dashboard.html

{% extends "base.html" %}
{% block content %}
{% load custom_filters %}
<html>
  <head>
    <!-- 💬 SmartCare Chatbot -->
<style>
.chatbot-container {
  position: fixed;
  bottom: 20px;
  right: 20px;
  width: 320px;
  background: white;
  border-radius: 15px;
  box-shadow: 0 4px 12px rgba(0,0,0,0.2);
  overflow: hidden;
  display: none;
  flex-direction: column;
  z-index: 9999;
}

.chatbot-header {
  background: linear-gradient(135deg, #007bff, #00bcd4);
  color: white;
  padding: 10px;
  text-align: center;
  font-weight: bold;
}

.chatbot-body {
  height: 300px;
  overflow-y: auto;
  padding: 10px;
  background: #f7f9fc;
}

.chatbot-input {
  display: flex;
  border-top: 1px solid #ddd;
}

.chatbot-input input {
  flex: 1;
  border: none;
  padding: 10px;
  outline: none;
}

.chatbot-input button {
  background: #007bff;
  color: white;
  border: none;
  padding: 10px 15px;
  cursor: pointer;
}
.chat-icon {
  position: fixed;
  bottom: 25px;
  right: 25px;
  background: #007bff;
  color: white;
  border-radius: 50%;
  width: 60px;
  height: 60px;
  font-size: 28px;
  text-align: center;
  line-height: 60px;
  cursor: pointer;
  box-shadow: 0 4px 8px rgba(0,0,0,0.3);
  z-index: 9999;
}
</style>
  </head>
  <body>
<div class="container mt-5">
    <h2 class="mb-4">📊 Student Dashboard</h2>

    <!-- Quick Action Cards -->
    <div class="row">
        <div class="col-md-4">
            <div class="card shadow-sm mb-3">
                <div class="card-body text-center">
                    <h5 class="card-title">➕ Add Daily Behavior</h5>
                    <a href="{% url 'upload_behavior' %}" class="btn btn-primary">Upload Behavior</a>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card shadow-sm mb-3">
                <div class="card-body text-center">
                    <h5 class="card-title">📈 Predictions</h5>
                    <a href="prediction_history" class="btn btn-success">Get Prediction</a>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card shadow-sm mb-3">
                <div class="card-body text-center">
                    <h5 class="card-title">📜 History</h5>
                    <a href="#" class="btn btn-secondary">View History</a>
                </div>
            </div>
        </div>
    </div>
    <!-- 🌿 Daily Care / Health Tips -->
<div class="card shadow-sm border-info mb-4 animate__animated animate__fadeIn">
  <div class="card-body">
    <h5 class="card-title">🌞 Daily Care / Health Tip</h5>
    <p class="card-text">{{ daily_tip }}</p>
  </div>
</div>


    <!-- Student Info -->
    {% if student %}
    <div class="card mt-4 shadow-sm">
        <div class="card-body">
            <h4>{{ student.name }} ({{ student.student_id }})</h4>
            <p>Email: {{ student.email }}</p>
        </div>
    </div>
    {% endif %}

    <!-- Latest Behavior -->
    {% if latest_behavior %}
    <div class="card mt-4 shadow-sm">
        <div class="card-body">
            <h5>📌 Latest Behavior ({{ latest_behavior.date }})</h5>
            <ul>
                <li>Screen time: {{ latest_behavior.screen_time_hrs }} hrs</li>
                <li>Night usage: {{ latest_behavior.night_usage_hrs }} hrs</li>
                <li>Sleep: {{ latest_behavior.sleep_hours }} hrs</li>
                <li>Social apps: {{ latest_behavior.app_social_hrs }} hrs</li>
                <li>Entertainment: {{ latest_behavior.app_entertainment_hrs }} hrs</li>
                <li>Education: {{ latest_behavior.app_education_hrs }} hrs</li>
            </ul>

            <!-- Progress Bars -->
            <h6>Progress Overview</h6>
            <div class="progress mb-2">
                <div class="progress-bar bg-info" role="progressbar" 
                     style="width: {{ latest_behavior.screen_time_hrs|floatformat:1|mul:8 }}%;" 
                     aria-valuenow="{{ latest_behavior.screen_time_hrs }}" aria-valuemin="0" aria-valuemax="12">
                    Screen Time: {{ latest_behavior.screen_time_hrs }} hrs
                </div>
            </div>
            <div class="progress mb-2">
                <div class="progress-bar bg-success" role="progressbar" 
                     style="width: {{ latest_behavior.sleep_hours|floatformat:1|mul:10 }}%;" 
                     aria-valuenow="{{ latest_behavior.sleep_hours }}" aria-valuemin="0" aria-valuemax="12">
                    Sleep: {{ latest_behavior.sleep_hours }} hrs
                </div>
            </div>
        </div>
    </div>
    {% endif %}

    <!-- Latest Prediction -->
    {% if latest_prediction %}
    <div class="card mt-4 shadow-sm border-success">
        <div class="card-body">
            <h5>🧠 Latest Prediction</h5>
            <p><strong>Risk Label:</strong> {{ latest_prediction.risk_label }}</p>
            <p><strong>Risk Score:</strong> {{ latest_prediction.risk_score|floatformat:2 }}</p>
        </div>
    </div>
    {% endif %}

    <!-- Charts -->
     <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mt-8">
  <!-- Screen Time Chart -->
  <div class="p-6 bg-white rounded-2xl shadow-md">
    <h4 class="text-lg font-bold mb-3 flex items-center gap-2">
      📱 Screen Time Trend
    </h4>
    <canvas id="screenTimeChart" height="180"></canvas>
    <button onclick="screenChart.resetZoom()" class="text-blue-600 mt-2 underline">Reset Zoom</button>

  </div>

  <!-- Risk Score Chart -->
  <div class="p-6 bg-white rounded-2xl shadow-md">
     
    <h4 class="text-lg font-bold mb-3 flex items-center gap-2">
      ⚠️ Risk Score Trend
    </h4>
    <button onclick="riskChart.resetZoom()" class="text-pink-600 mt-2 underline">Reset Zoom</button>

    <canvas id="riskScoreChart" height="180"></canvas>
  </div>
  <div class="chat-icon" onclick="toggleChatbot()">💬</div>

<div class="chatbot-container" id="chatbot">
  <div class="chatbot-header">🤖 SmartCare Bot</div>
  <div class="chatbot-body" id="chatBody">
    <p><strong>Bot:</strong> Hi there! 👋 I'm SmartCare Bot. How can I help you today?</p>
  </div>
  <div class="chatbot-input">
    <input type="text" id="userInput" placeholder="Type your question..." />
    <button onclick="sendMessage()">Send</button>
    <button onclick="startVoice()">🎙️</button>
  </div>
</div>
</div>
    <div class="mt-4 text-end">
        <a href="{% url 'logout' %}" class="btn btn-danger">Logout</a>
    </div>
</div>

<!-- Chart.js -->
 <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
 <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-3d@0.1.8/dist/chartjs-plugin-3d.min.js"></script>
 <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2.2.0"></script>

  <script>
  const dates = {{ dates|safe }};
  const screenTimes = {{ screen_times|safe }};
  const riskScores = {{ risk_scores|safe }};

  // --- Create gradient fills dynamically ---
  const ctx1 = document.getElementById('screenTimeChart').getContext('2d');
  const gradient1 = ctx1.createLinearGradient(0, 0, 0, 400);
  gradient1.addColorStop(0, 'rgba(54,162,235,0.5)');
  gradient1.addColorStop(1, 'rgba(54,162,235,0)');

  const ctx2 = document.getElementById('riskScoreChart').getContext('2d');
  const gradient2 = ctx2.createLinearGradient(0, 0, 0, 400);
  gradient2.addColorStop(0, 'rgba(255,99,132,0.5)');
  gradient2.addColorStop(1, 'rgba(255,99,132,0)');

  // --- Screen Time Chart ---
  const screenChart = new Chart(ctx1, {
    type: 'line',
    data: {
      labels: dates,
      datasets: [{
        label: 'Screen Time (hrs)',
        data: screenTimes,
        borderColor: '#36A2EB',
        backgroundColor: gradient1,
        fill: true,
        tension: 0.4,
        pointBackgroundColor: '#36A2EB',
        pointRadius: 5,
        pointHoverRadius: 7,
      }]
    },
    options: {
      responsive: true,
      plugins: {
        tooltip: {
          mode: 'index',
          intersect: false,
          callbacks: {
            label: function(ctx) {
              return ctx.dataset.label + ': ' + ctx.parsed.y.toFixed(2) + ' hrs';
            }
          }
        },
        legend: { labels: { color: '#333' } },
        zoom: {
          pan: { enabled: true, mode: 'x' },
          zoom: { wheel: { enabled: true }, pinch: { enabled: true }, mode: 'x' }
        }
      },
      interaction: { mode: 'nearest', intersect: false },
      scales: {
        y: {
          beginAtZero: true,
          title: { display: true, text: 'Hours' }
        },
        x: { title: { display: true, text: 'Date' } }
      }
    }
  });

  // --- Risk Score Chart ---
  const riskChart = new Chart(ctx2, {
    type: 'line',
    data: {
      labels: dates,
      datasets: [{
        label: 'Risk Score',
        data: riskScores,
        borderColor: '#FF6384',
        backgroundColor: gradient2,
        fill: true,
        tension: 0.4,
        pointBackgroundColor: riskScores.map(v => v > 0.6 ? '#FF0000' : '#00C853'),
        pointRadius: 6,
        pointHoverRadius: 8,
      }]
    },
    options: {
      responsive: true,
      plugins: {
        tooltip: {
          mode: 'index',
          intersect: false,
          callbacks: {
            label: function(ctx) {
              const risk = ctx.parsed.y > 0.6 ? '⚠️ High Risk' : '✅ Low Risk';
              return `${ctx.dataset.label}: ${ctx.parsed.y.toFixed(2)} (${risk})`;
            }
          }
        },
        legend: { labels: { color: '#333' } },
        zoom: {
          pan: { enabled: true, mode: 'x' },
          zoom: { wheel: { enabled: true }, pinch: { enabled: true }, mode: 'x' }
        }
      },
      scales: {
        y: {
          beginAtZero: true,
          max: 1,
          title: { display: true, text: 'Risk Probability' }
        },
        x: { title: { display: true, text: 'Date' } }
      }
    }
  });
</script>

 <script>
function toggleChatbot() {
  const bot = document.getElementById("chatbot");
  bot.style.display = bot.style.display === "flex" ? "none" : "flex";
}

function sendMessage() {
  const input = document.getElementById("userInput");
  const chatBody = document.getElementById("chatBody");
  const message = input.value.trim();
  if (!message) return;

  chatBody.innerHTML += `<p><strong>You:</strong> ${message}</p>`;
  input.value = "";

  fetch(`/api/students/chatbot/?q=${encodeURIComponent(message)}`)
    .then(res => res.json())
    .then(data => {
      chatBody.innerHTML += `<p><strong>Bot:</strong> ${data.reply}</p>`;
      chatBody.scrollTop = chatBody.scrollHeight;
    })
    .catch(() => {
      chatBody.innerHTML += `<p><strong>Bot:</strong> Sorry, I'm having trouble right now 😞</p>`;
    });
}
</script>

<script>
function startVoice() {
  const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
  recognition.lang = 'en-IN';
  recognition.start();

  recognition.onresult = function(event) {
    const message = event.results[0][0].transcript;
    document.getElementById("userInput").value = message;
    sendMessage();
  };

  recognition.onerror = function() {
    alert("Voice recognition failed. Please try again.");
  };
}
</script>

</body>
</html>
{% endblock %}
---------------------
def ai_chatbot(request):
    query = request.GET.get("q", "").lower()

    tips = [
        "💧 Drink water regularly to stay alert during classes!",
        "📚 Take a 5-minute break after every hour of study.",
        "😴 Try to sleep at least 7-8 hours a day.",
        "🌿 Go for a short walk to reduce screen fatigue.",
        "💭 Practice deep breathing for 2 minutes to reduce stress.",
        "🕒 Keep a fixed study schedule and stick to it."
    ]

    responses = {
        "stress": "Try meditation or deep breathing for 5 minutes. It calms your mind.",
        "study": "Study smart — 50 minutes focus + 10 minutes break is best.",
        "sleep": "Avoid screen time before bed and get at least 7 hours of sleep.",
        "phone": "Keep your phone away while studying for better concentration.",
        "exam": "Don’t panic! Revise key points and take breaks to refresh your mind.",
    }

    reply = None
    for keyword, ans in responses.items():
        if keyword in query:
            reply = ans
            break

    if not reply:
        reply = random.choice(tips)

    return JsonResponse({"reply": reply})

 
 ---------------------
students/base.html

<!DOCTYPE html>
<html>
<head>
    <title>{% block title %}SafeCampus AI{% endblock %}</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css"/>

</head>
<body>
<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
  <div class="container-fluid">
    <a class="navbar-brand" href="{% url 'student_list' %}">SafeCampus AI</a>
    <div class="d-flex">
      {% if user.is_authenticated %}
        <span class="navbar-text me-3">Hello, {{ user.username }}</span>
        <a href="{% url 'logout' %}" class="btn btn-outline-light btn-sm">Logout</a>
      {% else %}
        <a href="{% url 'login' %}" class="btn btn-outline-light btn-sm">Login</a>
      {% endif %}
    </div>
  </div>
</nav>
<div class="container mt-4">
    {% block content %}{% endblock %}
</div>
</body>
</html>
-------------
15-10-2025
views.py
def ai_chatbot(request):
    query = request.GET.get("q", "").lower()

    tips = [
        "💧 Drink water regularly to stay alert during classes!",
        "📚 Take a 5-minute break after every hour of study.",
        "😴 Try to sleep at least 7-8 hours a day.",
        "🌿 Go for a short walk to reduce screen fatigue.",
        "💭 Practice deep breathing for 2 minutes to reduce stress.",
        "🕒 Keep a fixed study schedule and stick to it."
    ]

    responses = {
        "hey":"Hello how can i help you",
        "stress": "Try meditation or deep breathing for 5 minutes. It calms your mind.",
        "study": "Study smart — 50 minutes focus + 10 minutes break is best.",
        "sleep": "Avoid screen time before bed and get at least 7 hours of sleep.",
        "phone": "Keep your phone away while studying for better concentration.",
        "exam": "Don’t panic! Revise key points and take breaks to refresh your mind.",
    }

    reply = None
    for keyword, ans in responses.items():
        if keyword in query:
            reply = ans
            break

    if not reply:
        reply = random.choice(tips)

    return JsonResponse({"reply": reply})

 
 ---------------------
16-10-2025
Neww features done download reports
17-10-2025

ai Detects imgage/txt
views.py-> Students (14:22)
def ai_chatbot(request):
    query = request.GET.get("q", "")
    if not query:
        return JsonResponse({"reply": "Hi 👋 How are you feeling today?"})
    reply = mental_health_reply(query)
    return JsonResponse({"reply": reply})
 ---------------
chatbot_nlp.py -> students

import random
import spacy
from nltk.corpus import wordnet

# Load small English NLP model (free)
nlp = spacy.load("en_core_web_sm")

# Categories and responses
RESPONSES = {
    "stress": [
        "It’s okay to feel stressed sometimes. Try deep breathing for 2 minutes 🌿",
        "Maybe take a short walk or talk to a friend. You’re doing your best 💪",
    ],
    "anxiety": [
        "When you feel anxious, try slow breathing — inhale 4s, hold 4s, exhale 4s 🧘",
        "Journaling your thoughts can help you process them better ✍️",
    ],
    "sleep": [
        "Try avoiding screens 30 mins before sleep 😴",
        "A calm playlist or reading a few pages can help you relax 💤",
    ],
    "motivation": [
        "Every small step counts — be proud of showing up today 🌟",
        "Focus on progress, not perfection. You’ve got this! 💪",
    ],
    "exercise": [
        "Even a 10-min walk can lift your mood and energy 🚶‍♀️",
        "Stretching and light yoga can help reduce tension 🌞",
    ],
    "default": [
        "I’m here for you. Want to talk about how you’re feeling? 💬",
        "You can share anything with me — this is a safe space 💖",
    ],
}

# Simple NLP intent matcher
def get_intent(text):
    text = text.lower()
    doc = nlp(text)
    for token in doc:
        for key in RESPONSES.keys():
            if key in token.text:
                return key
    return "default"

def mental_health_reply(user_input):
    intent = get_intent(user_input)
    return random.choice(RESPONSES[intent])
------------------------------------------------
23-10-2025

Bug Fixed 

Good — that error means there’s no Student record where name="Anu" in your database yet.
✅ But you do have a Student with id=7 (the one linked to user_id=5 — your Anu account).

Let’s fix it properly.

🩵 Step-by-step fix in Django shell

1️⃣ Find the student linked to Anu’s user

from django.contrib.auth.models import User
from students.models import Student

u = User.objects.get(username="Anu")   # get the user
s = Student.objects.get(user=u)        # find Student linked to that user


2️⃣ Check what you have

print(s.__dict__)


You’ll see something like:

{'id': 7, 'student_id': '', 'name': None, 'email': None, 'user_id': 5}


3️⃣ Update the missing values

s.student_id = "106"
s.name = "Anu"
s.email = "anu@example.com"
s.save()


4️⃣ Verify

print(s.__dict__)


✅ You should now see:

{'id': 7, 'student_id': '106', 'name': 'Anu', 'email': 'anu@example.com', 'user_id': 5}
--------------------





